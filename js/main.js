// Generated by CoffeeScript 1.6.1

/*
DigiSeller-ru-api
22.03.2013 (c) http://artod.ru
*/


(function() {

  (function(window, document) {
    var DS, inited;
    if (window.DigiSeller != null) {
      false;
    }
    DS = {};
    DS.$el = {
      head: null,
      body: null,
      widget: null
    };
    DS.opts = {
      seller_id: null,
      host: '//shop.digiseller.ru/xml/',
      hashPrefix: '#!digiseller',
      currency: 'RUR',
      sort: 'name',
      rows: 10,
      view: 'list',
      mainView: 'tile',
      logo_img: '',
      menu_purchases: true,
      menu_reviews: true,
      menu_contacts: true,
      imgsize_firstpage: 160,
      imgsize_listpage: 162,
      imgsize_infopage: 163,
      imgsize_category: 200
    };
    DS.util = {
      getUID: (function() {
        var id;
        id = 1;
        return function() {
          return id++;
        };
      })(),
      enc: function(t) {
        return encodeURIComponent(t);
      },
      prevent: function(e) {
        if (e.preventDefault) {
          e.preventDefault();
        } else {
          e.returnValue = false;
        }
      },
      extend: function(target, source, overwrite) {
        var key;
        for (key in source) {
          if (!source.hasOwnProperty(key)) {
            continue;
          }
          if (overwrite || typeof target[key] === 'object') {
            target[key] = source[key];
          }
        }
        return target;
      },
      getPopupParams: function(width, height) {
        var left, outerHeight, outerWidth, screenX, screenY, top;
        screenX = typeof window.screenX !== 'undefined' ? window.screenX : window.screenLeft;
        screenY = typeof window.screenY !== 'undefined' ? window.screenY : window.screenTop;
        outerWidth = typeof window.outerWidth !== 'undefined' ? window.outerWidth : document.body.clientWidth;
        outerHeight = typeof window.outerHeight !== 'undefined' ? window.outerHeight : document.body.clientHeight - 22;
        left = parseInt(screenX + ((outerWidth - width) / 2), 10);
        top = parseInt(screenY + ((outerHeight - height) / 2.5), 10);
        return "scrollbars=1, resizable=1, menubar=0, left=" + left + ", top=" + top + ", width=" + width + ", height=" + height + ", toolbar=0, status=0";
      },
      getAbsPos: function(a) {
        var b = {
				x: 0,
				y: 0
			};
			if (a.offsetParent) do b.x += a.offsetLeft, b.y += a.offsetTop, a = a.offsetParent;
			while (a);			
			return b;
      },
      scrollUp: function() {
        var body, doc, posY, scrollTop;
        doc = document.documentElement;
        body = document.body;
        scrollTop = doc && doc.scrollTop || body && body.scrollTop || 0;
        posY = DS.util.getAbsPos(DS.widget.main.$el).y;
        if (scrollTop > posY) {
          window.scroll(null, DS.util.getAbsPos(DS.widget.main.$el).y);
        }
      },
      cookie: {
        get: function(name) {
          var matches = document.cookie.match(new RegExp(
				  "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
				));

				return matches ? decodeURIComponent(matches[1]) : undefined;
        },
        set: function(name, value, props) {
          props = props || {};

				var exp = props.expires;
				if (typeof exp == 'number' && exp) {
					var d = new Date();
					d.setTime(d.getTime() + exp * 1000);
					exp = props.expires = d;
				}

				if (exp && exp.toUTCString) {
					props.expires = exp.toUTCString();
				}

				value = DS.util.enc(value);

				var updatedCookie = name + '=' + value;
				for (var propName in props) {
					updatedCookie += '; ' + propName;
					var propValue = props[propName];
					if (propValue !== true) {
						updatedCookie += '=' + propValue;
					}
				}

				document.cookie = updatedCookie;
        },
        del: function(name) {
          this.set(name, null, {
            expires: -1
          });
        }
      },
      agree: function(flag, onAgree) {
        var $rules;
        $rules = DS.dom.$('#digiseller-calc-rules');
        if ($rules) {
          $rules.checked = flag;
        }
        DS.opts.agree = flag ? 1 : 0;
        DS.util.cookie.set('digiseller-agree', DS.opts.agree);
        DS.popup.close();
        if (onAgree) {
          onAgree();
        }
      }
    };
    DS.dom = {
      $: function(selector, context, tagName) {
        var name, type;
        if (!selector) {
          return;
        }
        type = selector.substring(0, 1);
        name = selector.substring(1);
        switch (type) {
          case '#':
            return document.getElementById(name);
          case '.':
            tagName = tagName ? tagName : '*';
            if ( typeof document.getElementsByClassName !== 'function' ) {						
						for (
							var i = -1,
								results = [ ],
								finder = new RegExp('(?:^|\\s)' + name + '(?:\\s|$)'),
								a = context && context.getElementsByTagName && context.getElementsByTagName(tagName) || document.all || document.getElementsByTagName(tagName),
								l = a.length;
							++i < l;
							finder.test(a[i].className) && results.push(a[i])
						);

						a = null;

						return results;
					} else {
						return (context || document).getElementsByClassName(name);
					};
            break;
          default:
            return (context || document).getElementsByTagName(selector);
        }
      },
      attr: function($el, attr, val) {
        if (!$el || typeof attr === 'undefined') {
          return false;
        }
        if (typeof val !== 'undefined') {
          $el.setAttribute(attr, val);
        } else {
          try {
            return $el.getAttribute(attr);
          } catch (e) {
            return null;
          }
        }
      },
      addEvent: function($el, e, callback) {
        var ieCallback;
        if ($el.attachEvent) {
          ieCallback = function(e) {
            return callback.call($el, e);
          };
          $el.attachEvent('on' + e, ieCallback);
          return ieCallback;
        } else if ($el.addEventListener) {
          $el.addEventListener(e, callback, false);
          return callback;
        }
      },
      removeEvent: function($el, e, callback) {
        if ($el.detachEvent) {
          $el.detachEvent("on" + e, callback);
        } else if ($el.removeEventListener) {
          $el.removeEventListener(e, callback, false);
        }
      },
      klass: function(action, els, c, multy) {
        if (!els || !action) {
				return;
			}

			if (!multy) {
				els = [els];
			}

			var $el, _i, _len,
				re = new RegExp('(^|\\s)' + ( action === 'add' ? c : c.replace(' ', '|') ) + '(\\s|$)', 'g');
				
			for (_len = els.length, _i = _len-1; _i >= 0; _i--) {
				$el = els[_i];
				if ( action === 'add' && re.test($el.className) ) {
					continue;
				}

				$el.className = action === 'add' ? ($el.className + ' ' + c).replace(/\s+/g, ' ').replace(/(^ | $)/g, '') : $el.className.replace(re, "$1").replace(/\s+/g, " ").replace(/(^ | $)/g, "");
			}

			return els;
      },
      select: function($select, val) {
        var $option, $options, i, _i, _len;
        if (typeof val === 'undefined') {
          return DS.dom.$('option', $select)[$select.selectedIndex].value;
        } else {
          $options = DS.dom.$('option', $select);
          for (i = _i = 0, _len = $options.length; _i < _len; i = ++_i) {
            $option = $options[i];
            if ($option.value === val + '') {
              $select.selectedIndex = i;
              return;
            }
          }
        }
      },
      getStyle: function(url, onLoad) {
        var css, link;
        link = document.createElement('link');
        link.type = 'text/css';
        link.rel = 'stylesheet';
        link.href = url;
        DS.$el.head.appendChild(link);
        css = new Image();
        css.onerror = function() {
          if (onLoad) {
            return onLoad();
          }
        };
        css.src = url;
      },
      getScript: function(url, onLoad, onError) {
        var done, onComplite, script;
        script = document.createElement('script');
        script.type = 'text/javascript';
        script.setAttribute('encoding', 'UTF-8');
        script.src = url;
        done = false;
        onComplite = function(e) {
          DS.widget.loader.hide();
          done = true;
          script.onload = script.onreadystatechange = null;
          if (DS.$el.head && script.parentNode) {
            DS.$el.head.removeChild(script);
          }
        };
        script.onload = script.onreadystatechange = function(e) {
          if (!done && (!this.readyState || this.readyState === 'loaded' || this.readyState === 'complete')) {
            onComplite();
            if (onLoad != null) {
              onLoad();
            }
          }
        };
        script.onerror = function(e) {
          onComplite();
          if (onError != null) {
            onError;
          }
        };
        DS.widget.loader.show();
        DS.$el.head.appendChild(script);
      }
    };
    DS.widget = {
      main: {
        $el: null,
        init: function() {
          var callback;
          this.$el = DS.dom.$('#digiseller-main');
          DS.widget.main.$el.innerHTML = '';
          callback = function(e, type) {
            var $el, action;
            $el = e.originalTarget || e.srcElement;
            action = DS.dom.attr($el, 'data-action');
            if (action && typeof DS.events[type + '-' + action] === 'function') {
              return DS.events[type + '-' + action]($el, e);
            }
          };
          DS.dom.addEvent(DS.widget.main.$el, 'click', function(e) {
            return callback(e, 'click');
          });
        }
      },
      loader: {
        $el: null,
        timeout: null,
        init: function() {
          var div;
          div = document.createElement('div');
          div.id = 'digiseller-loader';
          div.className = div.id;
          div.innerHTML = DS.tmpls.loader;
          div.style.display = 'none';
          DS.$el.body.appendChild(div);
          this.$el = DS.dom.$("#" + div.id);
        },
        show: function() {
          var that;
          clearTimeout(this.timeout);
          that = this;
          this.timeout = setTimeout(function() {
            return that.$el.style.display = '';
          }, 1000);
        },
        hide: function() {
          clearTimeout(this.timeout);
          this.$el.style.display = 'none';
        }
      },
      search: {
        $el: null,
        $input: null,
        prefix: 'digiseller-search',
        init: function() {
          var form, that;
          this.$el = DS.dom.$("#" + this.prefix);
          if (!this.$el) {
            return;
          }
          this.$el.innerHTML = DS.tmpls.search;
          this.$input = DS.dom.$("." + this.prefix + "-input", this.$el, 'input')[0];
          form = DS.dom.$("." + this.prefix + "-form", this.$el, 'form')[0];
          that = this;
          DS.dom.addEvent(form, 'submit', function(e) {
            DS.util.prevent(e);
            window.location.hash = DS.opts.hashPrefix + ("/search?s=" + that.$input.value);
          });
        }
      },
      category: {
        $el: null,
        isInited: false,
        prefix: 'digiseller-category',
        init: function() {
          var that;
          this.$el = DS.dom.$("#" + this.prefix);
          if (!this.$el) {
            return;
          }
          this.isInited = false;
          that = this;
          DS.JSONP.get(DS.opts.host + 'shop_categories.asp', this.$el, {
            seller_id: DS.opts.seller_id,
            format: 'json'
          }, function(data) {
            if (!data) {
              return false;
            }
            that.$el.innerHTML = that.render(data.category);
            that.isInited = true;
            that.mark();
          });
        },
        mark: (function() {
          var _go;
          _go = function(cid) {
            var cat, cats, parent, sub, subs, _i, _len, _ref;
            cats = DS.dom.$('li', this.$el);
            if (!cats.length) {
              return;
            }
            subs = DS.dom.$('ul', this.$el);
            for (_i = 0, _len = subs.length; _i < _len; _i++) {
              sub = subs[_i];
              sub.style.display = 'none';
            }
            subs[0].style.display = '';
            DS.dom.klass('remove', cats, this.prefix + '-active', true);
            if (!cid) {
              return;
            }
            cat = DS.dom.$("#" + this.prefix + "-" + cid);
            if (!cat) {
              return;
            }
            DS.dom.klass('add', cat, this.prefix + '-active');
            parent = cat;
            while (parent.id !== this.prefix) {
              parent.style.display = '';
              parent = parent.parentNode;
            }
            if ((_ref = DS.dom.$("#" + this.prefix + "-sub-" + cid)) != null) {
              _ref.style.display = '';
            }
          };
          return function(cid) {
            var count, interval, that;
            if (!this.$el) {
              return;
            }
            if (this.isInited) {
              _go.call(this, cid);
            } else {
              that = this;
              count = 0;
              interval = setInterval(function() {
                if (that.isInited || count > 1000) {
                  clearInterval(interval);
                  if (that.isInited) {
                    _go.call(that, cid);
                  }
                }
                count++;
              }, 50);
            }
          };
        })(),
        render: function(categories, parent_cid) {
          var category, out, _i, _len;
          if (!categories) {
            return '';
          }
          out = '';
          for (_i = 0, _len = categories.length; _i < _len; _i++) {
            category = categories[_i];
            out += DS.tmpl(DS.tmpls.category, {
              d: category,
              url: DS.opts.hashPrefix + ("/articles/" + category.id),
              id: this.prefix + ("-" + category.id),
              sub: this.render(category.sub, category.id)
            });
          }
          return DS.tmpl(DS.tmpls.categories, {
            id: parent_cid ? this.prefix + ("-sub-" + parent_cid) : '',
            out: out
          });
        }
      },
      currency: {
        $el: null,
        init: function() {
          var $sel;
          this.$el = DS.dom.$('#digiseller-currency');
          if (!this.$el) {
            return;
          }
          this.$el.innerHTML = DS.tmpls.currency;
          $sel = DS.dom.$('select', this.$el)[0];
          DS.dom.addEvent($sel, 'change', function(e) {
            var type;
            type = DS.dom.attr(this, 'data-type');
            DS.opts.currency = DS.dom.select(this);
            DS.util.cookie.set('digiseller-currency', DS.opts.currency);
            DS.historyClick.reload();
          });
          DS.dom.select($sel, DS.opts.currency);
        }
      },
      pager: (function() {

        function _Class($el, opts) {
          this.$el = $el;
          opts = opts || {};
          this.page = opts.page || 1;
          this.rows = opts.rows || 10;
          this.total = opts.total || 0;
          this.opts = {
            tmpl: opts.tmpl || DS.tmpls.pages,
            max: opts.max || 2,
            getLink: opts.getLink || function(page) {
              return page;
            },
            onChangeRows: opts.onChangeRows || function(rows) {}
          };
          return;
        }

        _Class.prototype.mark = function() {
          var index, page, pages, _i, _len;
          pages = DS.dom.$('a', this.$el);
          for (index = _i = 0, _len = pages.length; _i < _len; index = ++_i) {
            page = pages[index];
            DS.dom.klass((this.page === parseInt(DS.dom.attr(page, 'data-page')) ? 'add' : 'remove'), page, 'digiseller-activepage');
          }
          return this;
        };

        _Class.prototype.render = function() {
          var $select, left, out, page, right, that;
          this.page = parseInt(this.page);
          this.rows = parseInt(this.rows);
          this.total = parseInt(this.total);
          this.$el.style.display = this.total ? '' : 'none';
          left = this.page - this.opts.max;
          left = left < 1 ? 1 : left;
          right = this.page + this.opts.max;
          right = right > this.total ? this.total : right;
          page = left;
          out = '';
          while (page <= right) {
            out += this.opts.getLink(page);
            page++;
          }
          if (left > 1) {
            out = this.opts.getLink(1) + (left > 2 ? '<span>...</span> ' : '') + out;
          }
          if (right < this.total) {
            out = out + (right < this.total - 1 ? '<span>...</span> ' : '') + this.opts.getLink(this.total);
          }
          this.$el.innerHTML = DS.tmpl(this.opts.tmpl, {
            out: out
          });
          that = this;
          $select = DS.dom.$('select', this.$el)[0];
          DS.dom.addEvent($select, 'change', function(e) {
            that.rows = DS.dom.select(this);
            return that.opts.onChangeRows(that.rows);
          });
          DS.dom.select($select, this.rows);
          this.mark();
          return this;
        };

        return _Class;

      })(),
      comments: (function() {

        function _Class($el, product_id, init) {
          this.$el = $el;
          this.product_id = product_id;
          this.init = init;
          this.isInited = false;
          this.type = '';
          this.page = 1;
          this.rows = 10;
          this.pager = null;
          return;
        }

        _Class.prototype.get = function() {
          var that;
          that = this;
          DS.JSONP.get(DS.opts.host + 'shop_reviews.asp', this.$el, {
            seller_id: DS.opts.seller_id,
            product_id: this.product_id,
            format: 'json',
            type: this.type,
            page: this.page,
            rows: this.rows
          }, function(data) {
            if (!data) {
              return false;
            }
            that.render(data);
          });
        };

        _Class.prototype.render = function(data) {
          var comment, comments, out, _i, _len;
          comments = data.review;
          out = '';
          if (!comments) {
            out = DS.tmpls.nothing;
          } else {
            for (_i = 0, _len = comments.length; _i < _len; _i++) {
              comment = comments[_i];
              out += DS.tmpl(DS.tmpls.comment, {
                d: comment
              });
            }
          }
          if (this.isInited) {
            this.pager.page = this.page;
            this.pager.rows = this.rows;
            this.pager.total = data.totalPages;
            this.pager.render();
          } else {
            this.init(data);
            this.container = DS.dom.$('.digiseller-comments', this.$el)[0];
            this.isInited = true;
          }
          this.container.innerHTML = out;
        };

        return _Class;

      })(),
      calc: (function() {
        var _els, _prefix;

        _els = ['amount', 'cnt', 'cntSelect', 'currency', 'amountR', 'price', 'buy', 'limit', 'rules'];

        _prefix = 'digiseller-calc';

        function _Class(id) {
          var el, rules, that, _i, _len;
          this.id = id;
          this.$ = {
            container: DS.dom.$("#" + _prefix)
          };
          if (!this.$.container) {
            return;
          }
          for (_i = 0, _len = _els.length; _i < _len; _i++) {
            el = _els[_i];
            this.$[el] = DS.dom.$("#" + _prefix + "-" + el);
          }
          that = this;
          if (this.$.amount) {
            if (this.$.cnt) {
              DS.dom.addEvent(this.$.amount, 'keyup', function() {
                return that.get('amount');
              });
              DS.dom.addEvent(this.$.cnt, 'keyup', function() {
                return that.get('cnt');
              });
            }
            if (this.$.cntSelect) {
              DS.dom.addEvent(this.$.cntSelect, 'change', function() {
                return that.get('cnt');
              });
            }
          }
          DS.dom.addEvent(this.$.currency, 'change', function() {
            if (that.$.amount) {
              return that.get();
            } else if (that.$.price) {
              return that.$.price.innerHTML = DS.dom.attr(DS.dom.$('option', that.$.currency)[that.$.currency.selectedIndex], 'data-price');
            }
          });
          rules = function(flag) {
            if (that.$.rules) {
              return DS.dom.klass((flag && !that.$.rules.checked ? 'add' : 'remove'), that.$.rules.parentNode, 'digiseller-calc-confirmation-error');
            }
          };
          DS.dom.addEvent(this.$.buy, 'mouseover', function() {
            return rules(true);
          });
          DS.dom.addEvent(this.$.buy, 'mouseout', function() {
            return rules(false);
          });
          return;
        }

        _Class.prototype.get = function(type) {
          var params, that;
          that = this;
          params = {
            product_id: this.id,
            format: 'json'
          };
          if (type === 'amount') {
            params.amount = this.$.amount.value;
          } else {
            params.cnt = this.$.cntSelect ? DS.dom.select(this.$.cntSelect) : this.$.cnt.value;
            this.checkMinMax(params.cnt);
          }
          params.currency = DS.dom.select(this.$.currency);
          DS.JSONP.get(DS.opts.host + 'shop_unit.asp', this.$.container, params, function(data) {
            if (!data) {
              return false;
            }
            that.render(data.prices_unit);
          });
        };

        _Class.prototype.checkMinMax = function(cnt) {
          var max, min, minmax, that;
          that = this;
          cnt = parseInt(cnt);
          max = parseInt(DS.dom.attr(this.$.buy, 'data-max'));
          min = parseInt(DS.dom.attr(this.$.buy, 'data-min'));
          minmax = function(val, flag) {
            that.$.limit.style.display = '';
            DS.dom.attr(that.$.buy, 'data-action', '');
            return that.$.limit.innerHTML = DS.tmpl(DS.tmpls.minmax, {
              val: val,
              flag: flag
            });
          };
          if (max && cnt > max) {
            minmax(max, true);
            return;
          } else if (min && cnt < min) {
            minmax(min, false);
            return;
          }
          DS.dom.attr(this.$.buy, 'data-action', 'buy');
          this.$.limit.style.display = 'none';
        };

        _Class.prototype.render = function(data) {
          if (!data) {
            return false;
          }
          if (data.unit_Amount) {
            this.$.amount.value = data.unit_Amount;
          }
          if (this.$.cnt && data.unit_Cnt) {
            this.checkMinMax(data.unit_Cnt);
            this.$.cnt.value = data.unit_Cnt;
          }
          if (this.$.cntSelect && data.unit_Currency) {
            DS.dom.select(this.$.cntSelect, data.unit_Currency);
          }
          this.$.amountR.innerHTML = data.unit_AmountDesc;
        };

        return _Class;

      })()
    };
    DS.route = {
      home: {
        url: '/home',
        action: function() {
          DS.widget.category.mark();
          this.get();
        },
        get: function() {
          var that;
          that = this;
          DS.JSONP.get(DS.opts.host + 'shop_products.asp', DS.widget.main.$el, {
            seller_id: DS.opts.seller_id,
            category_id: 0,
            rows: 10,
            format: 'json',
            order: DS.opts.sort,
            currency: DS.opts.currency
          }, function(data) {
            if (!data) {
              return false;
            }
            that.render(data);
            DS.util.scrollUp();
          });
        },
        render: function(data) {
          var article, articles, out, _i, _len;
          out = '';
          articles = data.product;
          if (articles && articles.length) {
            for (_i = 0, _len = articles.length; _i < _len; _i++) {
              article = articles[_i];
              out += DS.tmpl(DS.tmpls['article' + DS.opts.mainView.charAt(0).toUpperCase() + DS.opts.mainView.slice(1)], {
                d: article,
                url: DS.opts.hashPrefix + ("/detail/" + article.id),
                imgsize: DS.opts.mainView === 'tile' ? DS.opts.imgsize_firstpage : DS.opts.imgsize_listpage
              });
            }
          }
          return DS.widget.main.$el.innerHTML = DS.tmpl(DS.tmpls.showcaseArticles, {
            out: DS.opts.mainView === 'table' ? '<table class="digiseller-table">' + out + '</table>' : out,
            categories: data.categories,
            opts: DS.opts
          });
        }
      },
      search: {
        url: '/search(?:/([0-9]*))?\\?s=(.*)',
        search: null,
        page: null,
        rows: null,
        pager: null,
        prefix: 'digiseller-search',
        action: function(params) {
          this.search = decodeURIComponent(params[2]);
          this.page = parseInt(params[1]) || 1;
          this.rows = DS.opts.rows;
          DS.widget.category.mark();
          DS.widget.search.$input.value = this.search;
          this.get();
        },
        get: function() {
          var that;
          that = this;
          DS.JSONP.get(DS.opts.host + 'shop_search.asp', DS.widget.main.$el, {
            seller_id: DS.opts.seller_id,
            format: 'json',
            currency: DS.opts.currency,
            page: this.page,
            rows: this.rows,
            search: this.search
          }, function(data) {
            if (!data) {
              return false;
            }
            that.render(data);
            DS.util.scrollUp();
          });
        },
        render: function(data) {
          var article, articles, container, out, that, _i, _len;
          out = '';
          articles = data.product;
          if (!articles || !articles.length) {
            out = DS.tmpls.nothing;
          } else {
            for (_i = 0, _len = articles.length; _i < _len; _i++) {
              article = articles[_i];
              out += DS.tmpl(DS.tmpls.searchResult, {
                url: DS.opts.hashPrefix + ("/detail/" + article.id),
                imgsize: DS.opts.imgsize_listpage,
                d: article
              });
            }
          }
          container = DS.dom.$("#" + this.prefix + "-results");
          if (container) {
            container.innerHTML = out;
            this.pager.page = this.page;
            this.pager.rows = this.rows;
            this.pager.total = data.totalPages;
            this.pager.render();
          } else {
            DS.widget.main.$el.innerHTML = DS.tmpl(DS.tmpls.searchResults, {
              totalItems: data.totalItems,
              out: out
            });
            that = this;
            this.pager = new DS.widget.pager(DS.dom.$('.digiseller-paging', DS.widget.main.$el)[0], {
              page: this.page,
              rows: this.rows,
              total: data.totalPages,
              getLink: function(page) {
                return DS.tmpl(DS.tmpls.page, {
                  page: page,
                  url: DS.opts.hashPrefix + ("/search/" + page + "?s=" + that.search)
                });
              },
              onChangeRows: function(rows) {
                DS.opts.rows = rows;
                DS.util.cookie.set(DS.route.articles.prefix + '-rows', rows);
                that.page = 1;
                that.rows = rows;
                that.get();
                DS.historyClick.changeHashSilent(DS.opts.hashPrefix + ("/search/1?s=" + that.search));
              }
            }).render();
            DS.widget.currency.init();
          }
          DS.dom.$("#" + this.prefix + "-query").innerHTML = this.search.replace('<', '&lt;').replace('>', '&gt;');
          DS.dom.$("#" + this.prefix + "-total").innerHTML = data.totalItems;
        }
      },
      articles: {
        url: '/articles/([0-9]*)(?:/([0-9]*))?',
        cid: null,
        page: 1,
        rows: null,
        pager: null,
        pagerComments: null,
        prefix: 'digiseller-articles',
        action: function(params) {
          this.cid = params[1];
          this.page = parseInt(params[2]) || 1;
          this.rows = DS.opts.rows;
          this.get();
        },
        get: function() {
          var that;
          DS.widget.category.mark(this.cid);
          that = this;
          DS.JSONP.get(DS.opts.host + 'shop_products.asp', DS.widget.main.$el, {
            seller_id: DS.opts.seller_id,
            format: 'json',
            category_id: this.cid,
            page: this.page,
            rows: this.rows,
            order: DS.opts.sort,
            currency: DS.opts.currency
          }, function(data) {
            if (!data) {
              return false;
            }
            that.render(data);
            DS.util.scrollUp();
          });
        },
        render: function(data) {
          var article, articles, container, out, param, params, set, that, _i, _j, _len, _len1;
          out = '';
          data.totalPages = parseInt(data.totalPages);
          articles = data.product;
          if (!articles || !articles.length) {
            out = DS.tmpls.nothing;
          } else {
            for (_i = 0, _len = articles.length; _i < _len; _i++) {
              article = articles[_i];
              out += DS.tmpl(DS.tmpls['article' + DS.opts.view.charAt(0).toUpperCase() + DS.opts.view.slice(1)], {
                d: article,
                url: DS.opts.hashPrefix + ("/detail/" + article.id),
                imgsize: DS.opts.view === 'tile' ? DS.opts.imgsize_firstpage : DS.opts.imgsize_listpage
              });
            }
          }
          container = DS.dom.$("#" + this.prefix + "-" + this.cid);
          if (container) {
            container.innerHTML = DS.opts.view === 'table' ? '<table class="digiseller-table">' + out + '</table>' : out;
            this.pager.page = this.page;
            this.pager.rows = this.rows;
            this.pager.total = data.totalPages;
            this.pager.render();
          } else {
            DS.widget.main.$el.innerHTML = DS.tmpl(DS.tmpls.articles, {
              id: this.prefix + '-' + this.cid,
              opts: DS.opts,
              d: data,
              hasCategories: !data.categories || !data.categories.length ? false : true,
              articlesPanel: data.totalPages ? DS.tmpls.articlesPanel : '',
              out: out
            });
            if (data.totalPages) {
              that = this;
              this.pager = new DS.widget.pager(DS.dom.$("." + this.prefix + "-pager", DS.widget.main.$el)[0], {
                page: this.page,
                rows: this.rows,
                total: data.totalPages,
                getLink: function(page) {
                  return DS.tmpl(DS.tmpls.page, {
                    page: page,
                    url: DS.opts.hashPrefix + ("/articles/" + that.cid + "/" + page)
                  });
                },
                onChangeRows: function(rows) {
                  DS.opts.rows = rows;
                  DS.util.cookie.set(that.prefix + '-rows', rows);
                  that.page = 1;
                  that.rows = rows;
                  that.get();
                  DS.historyClick.changeHashSilent(DS.opts.hashPrefix + ("/articles/" + that.cid + "/1"));
                }
              }).render();
              DS.widget.currency.init();
              set = function(param) {
                var $selectSort;
                $selectSort = DS.dom.$('select', DS.dom.$("#digiseller-" + param))[0];
                DS.dom.addEvent($selectSort, 'change', function(e) {
                  DS.opts[param] = DS.dom.select(this);
                  DS.util.cookie.set(that.prefix + ("-" + param), DS.opts[param]);
                  return that.get();
                });
                return DS.dom.select($selectSort, DS.opts[param]);
              };
              params = ['sort', 'view'];
              for (_j = 0, _len1 = params.length; _j < _len1; _j++) {
                param = params[_j];
                set(param);
              }
            }
          }
        }
      },
      article: {
        url: '/detail(?:/([0-9]*))',
        comments: null,
        id: null,
        prefix: 'digiseller-article',
        action: function(params) {
          var that;
          this.id = params[1] || 0;
          that = this;
          DS.JSONP.get(DS.opts.host + 'shop_product_info.asp', DS.widget.main.$el, {
            seller_id: DS.opts.seller_id,
            format: 'json',
            product_id: this.id,
            currency: DS.opts.currency
          }, function(data) {
            if (!data) {
              return false;
            }
            that.render(data);
            DS.util.scrollUp();
          });
        },
        render: function(data) {
          var $preview, $thumb, $thumbs, onClick, that, _i, _len, _ref;
          if (!data || !data.product) {
            DS.widget.main.$el.innerHTML = DS.tmpls.nothing;
            return;
          }
          DS.widget.category.mark(data.product.category_id);
          DS.widget.main.$el.innerHTML = DS.tmpl(DS.tmpls.articleDetail, {
            d: data.product,
            imgsize: DS.opts.imgsize_infopage,
            buy: DS.tmpl(DS.tmpls.buy, {
              d: data.product,
              opts: DigiSeller.opts,
              failPage: window.location,
              agree: DS.opts.agree
            })
          });
          new DS.widget.calc(data.product.id, data.product.prices_unit);
          DS.widget.currency.init();
          that = this;
          $preview = DS.dom.$("#" + this.prefix + "-img-preview");
          if ($preview) {
            onClick = function($el) {
              var id, type;
              type = DS.dom.attr($el, 'data-type');
              id = type === 'img' ? DS.dom.attr($el, 'href') : DS.dom.attr($el, 'data-id');
              DS.popup.open(type, (type === 'img' ? id : DS.tmpl(DS.tmpls.video, {
                id: id,
                type: type
              })), $thumbs.children.length && $el.previousSibling ? function() {
                return onClick($el.previousSibling);
              } : false, $thumbs.children.length && $el.nextSibling ? function() {
                return onClick($el.nextSibling);
              } : false);
            };
            $thumbs = DS.dom.$("#" + this.prefix + "-thumbs");
            _ref = $thumbs.children;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              $thumb = _ref[_i];
              DS.dom.addEvent($thumb, 'click', function(e) {
                DS.util.prevent(e);
                return onClick(this);
              });
            }
            DS.dom.addEvent($preview, 'click', function(e) {
              DS.util.prevent(e);
              return onClick($thumbs.children.length ? $thumbs.children[0] : this);
            });
          }
        },
        initComments: function(callback) {
          var $el, that;
          $el = DS.dom.$(("#" + this.prefix + "-comments-") + this.id);
          if (DS.dom.attr($el, 'inited')) {
            if (callback) {
              callback();
            }
            return;
          }
          that = this;
          this.comments = new DS.widget.comments($el, this.id, function(data) {
            var $selectType;
            DS.dom.attr($el, 'inited', 1);
            that.comments.$el.innerHTML = DS.tmpl(DS.tmpls.comments, {
              totalGood: data.totalGood,
              totalBad: data.totalBad
            });
            if (callback) {
              callback();
            }
            $selectType = DS.dom.$('select', $el)[0];
            DS.dom.addEvent($selectType, 'change', function(e) {
              that.comments.page = 1;
              that.comments.type = DS.dom.$('option', this)[this.selectedIndex].value;
              return that.comments.get();
            });
            that.comments.pager = new DS.widget.pager(DS.dom.$('.digiseller-paging', that.comments.$el)[0], {
              page: that.comments.page,
              rows: that.comments.rows,
              total: data.totalPages,
              getLink: function(page) {
                return DS.tmpl(DS.tmpls.pageComment, {
                  page: page,
                  url: '#'
                });
              },
              onChangeRows: function(rows) {
                DS.util.cookie.set('digiseller-comments-rows', rows);
                that.comments.page = 1;
                that.comments.rows = rows;
                that.comments.get();
              }
            }).render();
          });
          this.comments.rows = DS.util.cookie.get('digiseller-comments-rows') || 10;
          this.comments.get();
        }
      },
      reviews: {
        url: '/reviews(?:/([0-9]*))?',
        comments: null,
        id: "",
        prefix: 'digiseller-reviews',
        action: function(params) {
          var that;
          if (!DS.dom.$('#' + this.id)) {
            this.id = this.prefix + ("-" + (DS.util.getUID()));
            that = this;
            this.comments = new DS.widget.comments(DS.widget.main.$el, '', function(data) {
              that.initComments(data);
              return DS.util.scrollUp();
            });
          }
          this.comments.page = parseInt(params[1]) || 1;
          this.comments.rows = DS.util.cookie.get(this.prefix + '-rows') || 10;
          this.comments.get();
        },
        initComments: function(data) {
          var that;
          this.comments.$el.innerHTML = DS.tmpl(DS.tmpls.reviews, {
            id: this.id,
            totalGood: data.totalGood,
            totalBad: data.totalBad
          });
          that = this;
          this.comments.pager = new DS.widget.pager(DS.dom.$('.digiseller-paging', this.comments.$el)[0], {
            page: this.comments.page,
            rows: this.comments.rows,
            total: data.totalPages,
            getLink: function(page) {
              return DS.tmpl(DS.tmpls.pageReview, {
                page: page,
                url: "#!digiseller/reviews/" + page
              });
            },
            onChangeRows: function(rows) {
              DS.util.cookie.set(this.prefix + '-rows', rows);
              that.comments.page = 1;
              that.comments.rows = rows;
              that.comments.get();
            }
          }).render();
          DS.dom.addEvent(DS.dom.$('select', DS.dom.$("#" + this.prefix + "-type"))[0], 'change', function(e) {
            that.comments.page = 1;
            that.comments.type = DS.dom.$('option', this)[this.selectedIndex].value;
            return that.comments.get();
          });
        }
      },
      contacts: {
        url: '/contacts',
        action: function(params) {
          var that;
          that = this;
          DS.JSONP.get(DS.opts.host + 'shop_contacts.asp', DS.widget.main.$el, {
            seller_id: DS.opts.seller_id,
            format: 'json'
          }, function(data) {
            if (!data) {
              false;
            }
            DS.widget.main.$el.innerHTML = DS.tmpl(DS.tmpls.contacts, {
              d: data
            });
            DS.util.scrollUp();
          });
        }
      }
    };
    DS.events = {
      'click-comments-page': function($el, e) {
        var page;
        DS.util.prevent(e);
        page = DS.dom.attr($el, 'data-page');
        DS.route.article.comments.page = page;
        DS.route.article.comments.get();
      },
      'click-buy': function($el, e) {
        var $rules, buy, form, id;
        DS.util.prevent(e);
        id = DS.dom.attr($el, 'data-id');
        form = DS.dom.attr($el, 'data-form');
        if (form) {
          $rules = DS.dom.$('#digiseller-calc-rules');
          if ($rules) {
            DS.opts.agree = $rules.checked ? 1 : 0;
            DS.util.cookie.set('digiseller-agree', DS.opts.agree);
            if (!$rules.checked) {
              return;
            }
          }
          DS.dom.$("#digiseller-buy-form-" + id).submit();
        } else {
          buy = function() {
            return window.open("https://www.oplata.info/asp/pay_x20.asp?id_d=" + id + "&dsn=limit", '_blank');
          };
          if (DS.opts.agreement_text) {
            DS.popup.open('text', DS.tmpl(DS.tmpls.agreement, {
              text: DS.opts.agreement_text
            }));
            DS.dom.addEvent(DS.dom.$('#digiseller-agree'), 'click', function() {
              return DS.util.agree(true, buy);
            });
            DS.dom.addEvent(DS.dom.$('#digiseller-disagree'), 'click', function() {
              return DS.util.agree(false);
            });
          } else {
            buy();
          }
        }
      },
      'click-article-tab': function($el, e) {
        var $panels, change, index;
        DS.util.prevent(e);
        index = DS.dom.attr($el, 'data-tab');
        $panels = $el.parentNode.nextSibling.children;
        DS.dom.klass('remove', $el.parentNode.children, 'digiseller-activeTab', true);
        DS.dom.klass('add', $el, 'digiseller-activeTab');
        change = function() {
          var $panel, _i, _len;
          for (_i = 0, _len = $panels.length; _i < _len; _i++) {
            $panel = $panels[_i];
            $panel.style.display = 'none';
          }
          return $panels[index].style.display = '';
        };
        if (index === '2') {
          DS.route.article.initComments(change);
        } else {
          change();
        }
      },
      'click-share': function($el, e) {
        var img, title, type;
        type = DS.dom.attr($el, 'data-type');
        title = DS.dom.attr($el, 'data-title');
        img = DS.dom.attr($el, 'data-img');
        if (DS.share[type]) {
          window.open(DS.share[type](title, img), "digisellerShare_" + type, DS.util.getPopupParams(626, 436));
        }
      },
      'click-agreement': function($el, e) {
        DS.util.prevent(e);
        DS.popup.open('text', DS.tmpl(DS.tmpls.agreement, {
          text: DS.opts.agreement_text
        }));
        DS.dom.addEvent(DS.dom.$('#digiseller-agree'), 'click', function() {
          return DS.util.agree(true);
        });
        return DS.dom.addEvent(DS.dom.$('#digiseller-disagree'), 'click', function() {
          return DS.util.agree(false);
        });
      }
    };
    DS.share = {
      vk: function(title, img) {
        return "//vkontakte.ru/share.php?url=" + (DS.util.enc(document.location)) + "&title=" + (DS.util.enc(title)) + "&image=" + (DS.util.enc(img)) + "&noparse=true";
      },
      tw: function(title) {
        return "//twitter.com/share?text=" + (DS.util.enc(title)) + "&url=" + (DS.util.enc(document.location));
      },
      fb: function(title, img) {
        return "//www.facebook.com/sharer.php?s=100&p[url]=" + (DS.util.enc(document.location)) + "&p[title]=" + (DS.util.enc(title)) + "&p[images][0]=" + (DS.util.enc(img));
      },
      wme: function(title, img) {
        return "//events.webmoney.ru/sharer.aspx?url=" + (DS.util.enc(document.location)) + "&title=" + (DS.util.enc(title)) + "&image=" + (DS.util.enc(img)) + "&noparse=0";
      }
    };
    DS.historyClick = (function() {
		var _rootAlias = '',
			_needReload = false,
			_routes = [],
			_revRoutes = [];

		function init() {
			if (!historyClick.interval) {
				historyClick.interval = setInterval(urlHashCheck, 100);
			}
		}

		function urlHashCheck() {
			var mayChangeReload = false; // _needReload ����� ���������� ��� ��� urlHashCheck ����� ��� �� ����������� � _needReload ��� ��������� true

			if (_needReload) {
				mayChangeReload = true;
			}

			if (window.location.hash !== historyClick.currentHash || _needReload) {
				historyClick.prevHash = ( _needReload ? historyClick.prevHash : historyClick.currentHash );
				historyClick.currentHash = window.location.hash.toString();

				go(historyClick.currentHash && historyClick.currentHash != '#' ? historyClick.currentHash : _rootAlias);

				if (mayChangeReload) {
					_needReload = false;
				}
			}
		}

		function go(hash) {
			if (!hash) {
				return;
			}

			var pattern,
				callback;

			for (var i = 0, len = _revRoutes.length; i < len; i++) {
				pattern = _revRoutes[i][0];
				callback = _revRoutes[i][1];

				if (pattern.test(hash) && typeof callback === 'function') {
					historyClick.params = hash.match(pattern);
					callback(historyClick.params);

					return;
				}
			}
		}

		var historyClick = {
			interval: null,
			currentHash: '',
			prevHash: '',
			params: [],
			start: function() {
				init();
			},
			rootAlias: function(hash) {
				if (hash) {
					_rootAlias = hash;
				} else {
					return _rootAlias;
				}
			},
			addRoute: function(pattern, callback) {
				if (typeof pattern === 'string') {
					pattern = [pattern];
				}

				for (var i = 0; i < pattern.length; i++) {
					_routes.push([new RegExp(pattern[i], 'i'), callback]);
				}

				_revRoutes = _routes.slice().reverse(); // ��������� � �����������
			},
			reload: function() {
				_needReload = true;
			},
			changeHashSilent: function(hash) {
				historyClick.prevHash = historyClick.currentHash;
				historyClick.currentHash = window.location.hash = hash;
			}
		};

		return historyClick;
	})();
    DS.JSONP = (function() {
		var _callbacks = [];

		function jsonp(url, el, params, callback) {
			var query = (url || '').indexOf('?') === -1 ? '?' : '&', key;

			params = params || {};

			var _uid = DS.util.getUID(); 
			params.queryId = _uid;

			for (key in params) {
				if ( !params.hasOwnProperty(key) ) {
					continue;
				}

				query += DS.util.enc(key) + '=' + DS.util.enc(params[key]) + '&'
			}			
			
			var needCheck = el ? true : false;
			
			if (needCheck) {				
				DS.dom.attr(el, 'data-qid', _uid);
			}
			
			_callbacks[_uid] = function(data) {
				if ( needCheck && ( !el || data.queryId != DS.dom.attr(el, 'data-qid') ) ) {
					return;
				}
				
				callback(data);
			};

			DS.dom.getScript( url + query + '_' + Math.random() );
			
			return _uid;
		}

		return {
			get: jsonp,
			callback: function(data) {
				if (!data || !data.queryId || !_callbacks[data.queryId]) {
					return;
				}
				
				_callbacks[data.queryId](data);

				try {
					delete _callbacks[data.queryId];
				} catch (e) {}

				_callbacks[data.queryId] = null;
			}
		};
	})();
    DS.tmpl = function(text, data) {
		settings = {
			evaluate		: /<\?([\s\S]+?)\?>/g,
			interpolate : /<\?=([\s\S]+?)\?>/g,
			escape			: /<\?-([\s\S]+?)\?>/g
		};

		// Combine delimiters into one regular expression via alternation.
		var noMatch = /(.)^/;
		var matcher = new RegExp([
			(settings.escape || noMatch).source,
			(settings.interpolate || noMatch).source,
			(settings.evaluate || noMatch).source
		].join('|') + '|$', 'g');

		// Compile the template source, escaping string literals appropriately.
		var index = 0,
			source = "__p+='",
			escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g,
			escapes = {
				"'":			"'",
				'\\':		 '\\',
				'\r':		 'r',
				'\n':		 'n',
				'\t':		 't',
				'\u2028': 'u2028',
				'\u2029': 'u2029'
			};
			
		text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
			source += text.slice(index, offset)
				.replace(escaper, function(match) {
					return '\\' + escapes[match];
				});

			/* todo: _.escape ���������� */
			source +=
				escape ? "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'" :
				interpolate ? "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'" :
				evaluate ? "';\n" + evaluate + "\n__p+='" : '';

			index = offset + match.length;
		});

		source += "';\n";

		// If a variable is not specified, place data values in local scope.
		if (!settings.variable) {
			source = 'with(obj||{}){\n' + source + '}\n';
		}

		source = "var __t,__p='',__j=Array.prototype.join," +
			"print=function(){__p+=__j.call(arguments,'');};\n" +
			source + "return __p;\n";

		try {
			var render = new Function(settings.variable || 'obj', /*'_', */source);
		} catch (e) {
			e.source = source;
			throw e;
		}

		if (data) {
			return render(data/*, _*/);
		}

		var template = function(data) {
			return render.call(this, data/*, _*/);
		};

		// Provide the compiled function source as a convenience for precompilation.
		template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

		return template;
	};
    DS.popup = (function() {
      var close, img, init, isClosed, isCompV, leftCallback, prefix, resize, rightCallback, setup, show, wrCallback;
      setup = {};
      img = null;
      prefix = 'digiseller-popup-';
      isCompV = document.compatMode === 'CSS1Compat';
      wrCallback = null;
      leftCallback = null;
      rightCallback = null;
      isClosed = true;
      show = function(onResize) {
        setup.$loader.style.display = 'none';
        setup.$container.style.display = '';
        wrCallback = DS.dom.addEvent(window, 'resize', onResize);
        onResize();
      };
      close = function(e) {
        if (e) {
          DS.util.prevent(e);
        }
        setup.$img.innerHTML = '';
        setup.$main.style.display = 'none';
        DS.dom.removeEvent(window, 'resize', wrCallback);
        isClosed = true;
        img = null;
      };
      resize = function(h, w, isHard) {
        var body, doc, h1, hs, isDec, scale0, topScroll, w1, wih, wiw, ws;
        wih = window.innerHeight;
        hs = (typeof wih !== 'undefined' ? wih : document[isCompV ? 'documentElement' : 'body'].offsetHeight - 22) - 100;
        if (!isHard) {
          scale0 = h / w;
          wiw = window.innerWidth;
          ws = (typeof wiw !== 'undefined' ? wiw : document[isCompV ? 'documentElement' : 'body'].offsetWidth) - 120;
          h1 = hs;
          w1 = ws;
          isDec = false;
          h >= hs && (isDec = true) || (h1 = h);
          w >= ws && (isDec = true) || (w1 = w);
          if (isDec) {
            if (scale0 <= h1 / w1) {
              h1 = Math.round(scale0 * w1);
            } else {
              w1 = Math.round(h1 / scale0);
            }
          }
          img.style.height = h1 + 'px';
          img.style.width = w1 + 'px';
        }
        setup.$container.style.width = ((isHard ? w : w1) + 50) + 'px';
        doc = document.documentElement;
        body = document.body;
        topScroll = doc && doc.scrollTop || body && body.scrollTop || 0;
        setup.$container.style.top = (hs - (isHard ? h : h1) + 20) / 3 + topScroll + 'px';
      };
      init = function() {
        var container, param, params, _i, _len;
        container = document.createElement('div');
        container.innerHTML = DS.tmpl(DS.tmpls.popup, {
          p: prefix
        });
        (document.getElementsByTagName('body')[0] || document.documentElement).appendChild(container.firstChild);
        params = ['main', 'fade', 'loader', 'container', 'close', 'img', 'left', 'right'];
        for (_i = 0, _len = params.length; _i < _len; _i++) {
          param = params[_i];
          setup['$' + param] = document.getElementById(prefix + param);
        }
        DS.dom.addEvent(setup.$fade, 'click', close);
        DS.dom.addEvent(setup.$close, 'click', close);
      };
      return {
        open: function(type, id, onLeft, onRight) {
          !setup.$main && init();
          isClosed = false;
          setup.$container.style.display = 'none';
          setup.$main.style.display = '';
          setup.$loader.style.display = '';
          setup.$left.style.display = onLeft ? '' : 'none';
          if (onLeft) {
            DS.dom.removeEvent(setup.$left, 'click', leftCallback);
            leftCallback = DS.dom.addEvent(setup.$left, 'click', onLeft);
          }
          setup.$right.style.display = onRight ? '' : 'none';
          if (onRight) {
            DS.dom.removeEvent(setup.$right, 'click', rightCallback);
            rightCallback = DS.dom.addEvent(setup.$right, 'click', onRight);
          }
          switch (type) {
            case 'img':
              DS.dom.klass('remove', setup.$img, 'digiseller-popup-video');
              img = new Image();
              img.onload = function() {
                var h, w;
                if (isClosed) {
                  return;
                }
                h = img.height;
                w = img.width;
                DS.dom.removeEvent(window, 'resize', wrCallback);
                show(function() {
                  resize(h, w);
                });
                setup.$img.innerHTML = '';
                return setup.$img.appendChild(img);
              };
              img.src = id;
              break;
            default:
              DS.dom.klass('add', setup.$img, 'digiseller-popup-video');
              show(function() {
                resize(200, 500, true);
              });
              setup.$img.innerHTML = id;
          }
        },
        close: close
      };
    })();
    inited = false;
    DS.init = function() {
      if (inited) {
        return false;
      }
      inited = true;
      DS.$el.head = DS.dom.$('head')[0] || document.documentElement;
      DS.$el.body = DS.dom.$('body')[0] || document.documentElement;
      DS.dom.getStyle(DS.opts.host + 'shop_css.asp?seller_id=' + DS.opts.seller_id, function() {
        var homeInited, name, param, params, route, _fn, _i, _len, _ref, _ref1, _ref2;
        DS.opts.currency = DS.util.cookie.get('digiseller-currency') || DS.opts.currency;
        params = ['sort', 'rows', 'view'];
        for (_i = 0, _len = params.length; _i < _len; _i++) {
          param = params[_i];
          DS.opts[param] = DS.util.cookie.get(DS.route.articles.prefix + '-' + param) || DS.opts[param];
        }
        DS.opts.agree = DS.util.cookie.get('digiseller-agree') || DS.opts.agree;
        DS.widget.category.init();
        DS.widget.main.init();
        DS.widget.loader.init();
        DS.widget.search.init();
        if ((_ref = DS.dom.$('#digiseller-logo')) != null) {
          _ref.innerHTML = DS.tmpl(DS.tmpls.logo, {
            logo_img: DS.opts.logo_img
          });
        }
        if ((_ref1 = DS.dom.$('#digiseller-topmenu')) != null) {
          _ref1.innerHTML = DS.tmpl(DS.tmpls.topmenu, {
            d: DS.opts
          });
        }
        if (!DS.widget.category.$el) {
          DS.widget.main.$el.className = 'digiseller-main-nocategory';
        }
        homeInited = false;
        DS.historyClick.addRoute('#.*', function(params) {
          if (homeInited) {
            return;
          }
          homeInited = true;
          DS.route.home.action();
        });
        _ref2 = DS.route;
        _fn = function(route) {
          DS.historyClick.addRoute(DS.opts.hashPrefix + route.url, function(params) {
            homeInited = true;
            route.action(params);
          });
        };
        for (name in _ref2) {
          route = _ref2[name];
          if (!(DS.route.hasOwnProperty(name) || route.url || route.action)) {
            continue;
          }
          _fn(route);
        }
        DS.historyClick.rootAlias(DS.opts.hashPrefix + '/home');
        DS.historyClick.start();
        if (window.location.hash === '') {
          DS.historyClick.reload();
        }
      });
    };
    window.DigiSeller = DS;
    DS.dom.addEvent(window, 'load', DS.init);
  })(window, document);

}).call(this);
