// Generated by CoffeeScript 1.8.0

/**
DigiSeller shop widget v. 2
20.08.2015 http://artod.ru
 */

(function() {
  var DS, checkReady, _cssIsLoaded;

  if (window.DigiSeller != null) {
    return false;
  }

  _cssIsLoaded = true;

  DS = {};

  DS.el = {
    head: null,
    body: null
  };

  DS.opts = {
    seller_id: null,
    cart_uid: '',
    host: '//shop.digiseller.ru/xml/',
    hashPrefix: '#!digiseller',
    currency: 'RUR',
    currentLang: '',
    sort: 'name',
    rows: 10,
    view: 'list',
    main_view: 'tile',
    logo_img: '',
    menu_purchases: true,
    menu_reviews: true,
    menu_contacts: true,
    imgsize_firstpage: 160,
    imgsize_listpage: 162,
    imgsize_infopage: 163,
    imgsize_category: 200
  };

  DS.cookie = {
    get: function(name) {
      var matches = document.cookie.match(new RegExp(
		  "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
		));

		return matches ? decodeURIComponent(matches[1]) : undefined;
    },
    set: function(name, value, props) {
      props = props || {};

		var exp = props.expires;
		if (typeof exp === 'number' && exp) {
			var d = new Date();
			d.setTime(d.getTime() + exp * 1000);
			exp = props.expires = d;
		}

		if (exp && exp.toUTCString) {
			props.expires = exp.toUTCString();
		}

		value = DS.util.enc(value);

		var updatedCookie = name + '=' + value;
		for (var propName in props) {
			if ( !DS.util.hasOwnProp(props, propName) ) continue;

			updatedCookie += '; ' + propName;
			var propValue = props[propName];
			if (propValue !== true) {
				updatedCookie += '=' + propValue;
			}
		}

		document.cookie = updatedCookie;
    },
    del: function(name) {
      this.set(name, null, {
        expires: -1
      });
    }
  };

  DS.util = {
    getUID: (function() {
      var _id;
      _id = 1;
      return function() {
        return _id++;
      };
    })(),
    enc: function(t) {
      return encodeURIComponent(t);
    },
    prevent: function(e) {
      if (e.preventDefault) {
        e.preventDefault();
      } else {
        e.returnValue = false;
      }
    },
    hasOwnProp: function(source, prop) {
      return Object.prototype.hasOwnProperty.call(source, prop);
    },
    extend: function(obj) {
      var type = typeof obj;
		if (! (type === 'function' || type === 'object' && !!obj) ) return obj;
		
		var /*source, */prop;
		//for (var i = 1, length = arguments.length; i < length; i++) {
		DS.util.each(arguments, function(source) {
			//source = arguments[i];
			for (prop in source)
				if ( DS.util.hasOwnProp(source, prop) )
					obj[prop] = source[prop];
			
		})
		//}
		return obj;
    },
    each: function(els, cb) {
      var el, i, res, _i, _len;
      els = els || {};
      for (i = _i = 0, _len = els.length; _i < _len; i = ++_i) {
        el = els[i];
        res = cb(el, i);
        if (res === false) {
          break;
        }
      }
    },
    getPopupParams: function(width, height) {
      var left, outerHeight, outerWidth, screenX, screenY, top;
      screenX = typeof window.screenX !== 'undefined' ? window.screenX : window.screenLeft;
      screenY = typeof window.screenY !== 'undefined' ? window.screenY : window.screenTop;
      outerWidth = typeof window.outerWidth !== 'undefined' ? window.outerWidth : document.body.clientWidth;
      outerHeight = typeof window.outerHeight !== 'undefined' ? window.outerHeight : document.body.clientHeight - 22;
      left = parseInt(screenX + ((outerWidth - width) / 2), 10);
      top = parseInt(screenY + ((outerHeight - height) / 2.5), 10);
      return "scrollbars=1, resizable=1, menubar=0, left=" + left + ", top=" + top + ", width=" + width + ", height=" + height + ", toolbar=0, status=0";
    },
    getAbsPos: function(element, side) {
      var position = 0;
		
		while (element != null) {
			position += element["offset" + side];
			element = element.offsetParent;
		}
		
		return position;
    },
    scrollUp: function() {
      var body, doc, posY, scrollTop;
      doc = document.documentElement;
      body = document.body;
      scrollTop = doc && doc.scrollTop || body && body.scrollTop || 0;
      posY = DS.util.getAbsPos(DS.widget.main.$el.get(0), 'Top');
      if (scrollTop > posY) {
        window.scroll(null, posY);
      }
    },
    debounce: function(cb, delay) {
      var timeout;
      timeout = null;
      return function() {
        var args, context;
        context = this;
        args = arguments;
        clearTimeout(timeout);
        timeout = setTimeout(function() {
          cb.apply(context, args);
          return context = args = null;
        }, delay || 200);
      };
    }
  };

  DS.$ = (function() {
    var _getVal, _klass, _setVal;
    _klass = function(action, el, cl) {
      var re;
      re = new RegExp('(^|\\s)' + (action === 'add' ? cl : cl.replace(' ', '|')) + '(\\s|$)', 'g');
      if (action === 'add' && re.test(el.className)) {
        return;
      }
      if (action === 'add') {
        el.className = (el.className + ' ' + cl).replace(/\s+/g, ' ').replace(/(^ | $)/g, '');
      } else {
        el.className = el.className.replace(re, "$1").replace(/\s+/g, ' ').replace(/(^ | $)/g, '');
      }
    };
    _getVal = function(el) {
      var option;
      if (!el || !el.nodeName) {
        return null;
      }
      switch (el.nodeName) {
        case 'SELECT':
          option = el.querySelectorAll('option')[el.selectedIndex];
          if (option) {
            return option.value;
          } else {
            return null;
          }
        default:
          return el.value;
      }
    };
    _setVal = function(el, val) {
      var options;
      if (!el || !el.nodeName) {
        return false;
      }
      switch (el.nodeName) {
        case 'SELECT':
          options = el.querySelectorAll('option');
          DS.util.each(options, function(option, i) {
            if (option.value === val + '') {
              el.selectedIndex = i;
            }
          });
          break;
        default:
          el.value = val;
          return;
      }
    };
    return function(selector, $context) {
      var context, out, _els;
      _els = [];
      if (typeof selector === 'string') {
        context = $context && $context.get && $context.get(0);
        if (typeof $context === 'undefined' || context) {
          DS.util.each((context || document).querySelectorAll(selector), function(el) {
            return _els.push(el);
          });
        }
      } else if (Object.prototype.toString.call(selector) === '[object Array]') {
        _els = selector;
      } else if (selector && (selector.nodeType || selector === window)) {
        _els = [selector];
      }
      out = {
        each: function(cb) {
          DS.util.each(_els, cb);
          return this;
        },
        addClass: function(cl) {
          this.each(function(el) {
            _klass('add', el, cl);
          });
          return this;
        },
        removeClass: function(cl) {
          this.each(function(el) {
            _klass('remove', el, cl);
          });
          return this;
        },
        on: function(typeWithScope, handler) {
          this.each(function(el, i) {
            var events, ieHandler, type;
            if (!el.DigiSeller) {
              el.DigiSeller = {};
            }
            if (!el.DigiSeller.events) {
              el.DigiSeller.events = {};
            }
            if (!el.DigiSeller.events[typeWithScope]) {
              el.DigiSeller.events[typeWithScope] = [];
            }
            events = (el && el.DigiSeller && el.DigiSeller.events) || {};
            type = typeWithScope.split('-')[0];
            if (el.attachEvent) {
              ieHandler = function(type) {
                return handler.call(el, type);
              };
              el.attachEvent("on" + type, ieHandler);
              el.DigiSeller.events[typeWithScope].push(ieHandler);
            } else if (el.addEventListener) {
              el.addEventListener(type, handler, false);
              el.DigiSeller.events[typeWithScope].push(handler);
            }
          });
          return this;
        },
        off: function(typeWithScope, handler) {
          this.each(function(el, i) {
            var handlers, j, type;
            handlers = (el && el.DigiSeller && el.DigiSeller.events && el.DigiSeller.events[typeWithScope]) || [];
            j = handlers.length;
            type = typeWithScope.split('.')[0];
            while (j--) {
              handler = handlers[j];
              if (el.detachEvent) {
                el.detachEvent("on" + type, handler);
              } else if (el.removeEventListener) {
                el.removeEventListener(type, handler, false);
              }
              handlers.splice(j, 1);
            }
          });
          return this;
        },
        show: function() {
          return this.removeClass('digiseller-hidden');
        },
        hide: function() {
          return this.addClass('digiseller-hidden');
        },
        get: function(i) {
          return _els[i];
        },
        attr: function(attr, val) {
          var e;
          if (typeof val === 'undefined') {
            try {
              return _els[0] && _els[0].getAttribute(attr);
            } catch (_error) {
              e = _error;
              return null;
            }
          } else {
            this.each(function(el) {
              el.setAttribute(attr, val);
            });
          }
          return this;
        },
        html: function(html) {
          if (typeof html === 'undefined') {
            return _els[0] && _els[0].innerHTML;
          } else {
            this.each(function(el) {
              el.innerHTML = html;
            });
          }
          return this;
        },
        val: function(val) {
          if (typeof val === 'undefined') {
            return _els[0] && _getVal(_els[0]);
          } else {
            this.each(function(el) {
              _setVal(el, val);
            });
          }
          return this;
        },
        css: function(prop, val) {
          if (typeof val === 'undefined') {
            return _els[0] && _els[0].style[prop];
          } else {
            this.each(function(el) {
              el.style[prop] = val;
            });
          }
          return this;
        },
        remove: function() {
          this.each(function(el) {
            el.parentNode.removeChild(el);
          });
          return this;
        },
        parent: function() {
          var els;
          els = [];
          this.each(function(el) {
            els.push(el.parentNode);
          });
          return DS.$(els);
        },
        next: function() {
          var els;
          els = [];
          this.each(function(el) {
            els.push(el.nextSibling);
          });
          return DS.$(els);
        },
        prev: function() {
          var els;
          els = [];
          this.each(function(el) {
            els.push(el.prevSibling);
          });
          return DS.$(els);
        },
        children: function() {
          var els;
          els = [];
          this.each(function(el) {
            DS.util.each(el.children, function(child) {
              els.push(child);
            });
          });
          return DS.$(els);
        },
        eq: function(i) {
          return DS.$(_els[i]);
        }
      };
      out.length = _els.length;
      return out;
    };
  })();

  DS.dom = {
    getStyle: function(url, onLoad) {
      var link;
      link = document.createElement('link');
      link.type = 'text/css';
      link.rel = 'stylesheet';
      link.href = url;
      DS.el.head.appendChild(link);
    }
  };

  DS.serialize = function(form, onEach) {
    if (!form || form.nodeName !== "FORM") {
		return;
	}

	var i, j,
		obj = {};

	//for (i = form.elements.length - 1; i >= 0; i = i - 1) {
	DS.util.each(form.elements, function(element) {
		if (element.name === "") {
			//continue;
			return;
		}
		
		switch (element.nodeName) {
			case 'INPUT':
				switch (element.type) {
					case 'text':
					case 'hidden':
					case 'password':
					case 'number':
						obj[element.name] = DS.util.enc(element.value);
						break;
					case 'checkbox':
					case 'radio':
						if (element.checked) {
							obj[element.name] = DS.util.enc(element.value);
						}
						break;
					case 'file':
						break;
				}
				break;
			case 'TEXTAREA':
				obj[element.name] = DS.util.enc(element.value);
				break;
			case 'SELECT':
				switch (element.type) {
					case 'select-one':
						obj[element.name] = DS.util.enc(element.value);
						break;
					case 'select-multiple':
						//for (j = element.options.length - 1; j >= 0; j = j - 1) {
						DS.util.each(element.options, function(option) {
							if (option.selected) {
								obj[element.name] = DS.util.enc(option.value);
							}
						});
						break;
				}
				break;
		}
		
		if (typeof onEach === 'function') {
			onEach(element);
		}
	});

	return obj;
  };

  DS.historyClick = (function() {
	var _rootAlias = '',
		_needReload = false,
		_routes = [],
		_revRoutes = [];

	function init() {
		if (historyClick.interval) {
			return;
		}

		DS.$(window).on('hashchange', urlHashCheck);
	}

	function urlHashCheck() {
		var mayChangeReload = false; // _needReload может обнулиться так как urlHashCheck может еще не закончиться а _needReload уже поставили true

		if (_needReload) {
			mayChangeReload = true;
		}

		if (window.location.hash !== historyClick.currentHash || _needReload) {
			historyClick.prevHash = ( _needReload ? historyClick.prevHash : historyClick.currentHash );
			historyClick.currentHash = window.location.hash.toString();

			go(historyClick.currentHash && historyClick.currentHash != '#' ? historyClick.currentHash : _rootAlias);

			if (mayChangeReload) {
				_needReload = false;
			}
		}
	}

	function go(hash) {
		if (!hash) {
			return;
		}
		
		historyClick.onGo()

		var pattern,
			callback;

		for (var i = 0, len = _revRoutes.length; i < len; i++) {
			pattern = _revRoutes[i][0];
			callback = _revRoutes[i][1];

			if (pattern.test(hash) && typeof callback === 'function') {
				historyClick.params = hash.match(pattern);
				callback(historyClick.params);

				return;
			}
		}
	}

	var historyClick = {
		interval: null,
		currentHash: '',
		prevHash: '',
		params: [],
		start: function() {
			init();
			urlHashCheck();
		},
		rootAlias: function(hash) {
			if (hash) {
				_rootAlias = hash;
			} else {
				return _rootAlias;
			}
		},
		addRoute: function(pattern, callback) {
			if (typeof pattern === 'string') {
				pattern = [pattern];
			}

			for (var i = 0; i < pattern.length; i++) {
				_routes.push([new RegExp(pattern[i], 'i'), callback]);
			}

			_revRoutes = _routes.slice().reverse(); // клонируем и реверсируем
		},
		reload: function() {
			_needReload = true;
			urlHashCheck();
		},
		changeHashSilent: function(hash) {
			historyClick.prevHash = historyClick.currentHash;
			historyClick.currentHash = window.location.hash = hash;
		},
		onGo: function() {
		
		}
	};

	return historyClick;
})();

  DS.ajax = (function() {
    var _isXdr = false,
		createCORSRequest = function() {
			return null;
		};	
	
	if ( 'withCredentials' in new XMLHttpRequest() ) {
		createCORSRequest = function(method, url) {
			var xhr = new XMLHttpRequest();
			xhr.open(method, url, true);
			if (method === 'POST') xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=UTF-8');
			return xhr;
		}
	} else if (typeof XDomainRequest !== 'undefined') {
		_isXdr = true;
		createCORSRequest = function(method, url) {
			var xdr = new XDomainRequest();
			xdr.open(method, url);
			
			return xdr;
		}
	}
	
	/*function createCORSRequest(method, url) {
		var xhr = new XMLHttpRequest();
		if ('withCredentials' in xhr) {
			xhr.open(method, url, true);
		} else if (typeof XDomainRequest !== 'undefined') {
			xhr = new XDomainRequest();
			xhr.open(method, url);
		} else {
			xhr = null;
		}
		
		if (xhr && xhr.setRequestHeader && method === 'POST')
			xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded; charset=UTF-8');
		
		return xhr;
	}*/
	
	function toQueryString(params) {
		var key,
			queryString = [];

		for (key in params) {
			if ( !DS.util.hasOwnProp(params, key) ) continue;
			
			queryString.push( ( DS.util.enc(key) + '=' + DS.util.enc(params[key]) ) );
		}

		return queryString.join('&');
	};
    return function(method, url, opts) {
      var needCheck, queryString, sign, uid, xhr, _onComplete;
      opts = DS.util.extend({
        $el: null,
        data: {},
        onLoad: function() {},
        onFail: function() {},
        onComplete: function() {}
      }, opts);
      if (_isXdr && method === 'POST') {
        method = 'GET';
        opts.data && (opts.data.xdr = 1);
      }
      sign = (/\?/.test(url) ? '&' : '?');
      queryString = toQueryString(opts.data);
      xhr = createCORSRequest(method, url + sign + 'transp=cors&format=json&lang=' + DS.opts.currentLang + (method === 'GET' ? '&_=' + Math.random() + (queryString ? '&' + queryString : '') : ''));
      uid = DS.util.getUID();
      DS.widget.loader.show(uid);
      _onComplete = function(xhr) {
        opts.onComplete(xhr);
        return DS.widget.loader.hide(uid);
      };
      if (!xhr) {
        return;
      }
      needCheck = opts.$el ? true : false;
      if (needCheck) {
        opts.$el.attr('data-qid', uid);
      }
      xhr.onload = function() {
        _onComplete(xhr);
        if (needCheck && parseInt(opts.$el.attr('data-qid')) !== uid) {
          return;
        }
        return opts.onLoad(JSON.parse(xhr.responseText), xhr);
      };
      xhr.onerror = function() {
        _onComplete(xhr);
        return opts.onFail(xhr);
      };
      xhr.onabort = function() {
        console.log('abort');
        return _onComplete(xhr);
      };
      if (_isXdr) {
        setTimeout(function() {
          xhr.send(queryString);
        }, 0);
      } else {
        xhr.send(queryString);
      }
      return xhr;
    };
  })();


  /*
  DS.JSONP = `(function() {
  	var _callbacks = [];
  
  	function jsonp(url, $el, params, onLoad, onFail, onComplete) {
  		var query = (url || '').indexOf('?') === -1 ? '?' : '&',
  			key;
  
  		params = params || {};
  
  		var _uid = DS.util.getUID();
  		params.queryId = _uid;
  
  		for (key in params) {
  			if ( !DS.util.hasOwnProp(params, key) ) continue;
  
  			query += DS.util.enc(key) + '=' + DS.util.enc(params[key]) + '&'
  		}
  
  		var needCheck = $el ? true : false;
  
  		if (needCheck) {
  			$el.attr('data-qid', _uid);
  		}
  
  		_callbacks[_uid] = function(data) {
  			if ( needCheck && ( !$el || data.queryId != $el.attr('data-qid') ) ) {
  				return;
  			}
  
  			onLoad(data);
  		};
  
  		DS.dom.getScript(url + query + '_' + Math.random(), null, onFail, onComplete);
  
  		return _uid;
  	}
  
  	return {
  		get: jsonp,
  		callback: function(data) {
  			if (!data || !data.queryId || !_callbacks[data.queryId]) {
  				return;
  			}
  
  			_callbacks[data.queryId](data);
  
  			try {
  				delete _callbacks[data.queryId];
  			} catch (e) {}
  
  			_callbacks[data.queryId] = null;
  		}
  	};
  })()`
   */

  DS.tmpl = function(text, data) {
	settings = {
		evaluate		: /<\?([\s\S]+?)\?>/g,
		interpolate : /<\?=([\s\S]+?)\?>/g,
		escape			: /<\?-([\s\S]+?)\?>/g
	};

	// Combine delimiters into one regular expression via alternation.
	var noMatch = /(.)^/;
	var matcher = new RegExp([
		(settings.escape || noMatch).source,
		(settings.interpolate || noMatch).source,
		(settings.evaluate || noMatch).source
	].join('|') + '|$', 'g');

	// Compile the template source, escaping string literals appropriately.
	var index = 0,
		source = "__p+='",
		escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g,
		escapes = {
			"'":			"'",
			'\\':		 '\\',
			'\r':		 'r',
			'\n':		 'n',
			'\t':		 't',
			'\u2028': 'u2028',
			'\u2029': 'u2029'
		};

	text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
		source += text.slice(index, offset)
			.replace(escaper, function(match) {
				return '\\' + escapes[match];
			});

		/* todo: _.escape переделать */
		source +=
			escape ? "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'" :
			interpolate ? "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'" :
			evaluate ? "';\n" + evaluate + "\n__p+='" : '';

		index = offset + match.length;
	});

	source += "';\n";

	// If a variable is not specified, place data values in local scope.
	if (!settings.variable) {
		source = 'with(obj||{}){\n' + source + '}\n';
	}

	source = "var __t,__p='',__j=Array.prototype.join," +
		"print=function(){__p+=__j.call(arguments,'');};\n" +
		source + "return __p;\n";

	try {
		var render = new Function(settings.variable || 'obj', 'DS', source);
	} catch (e) {
		e.source = source;
		throw e;
	}

	if (data) {
		return render(data, DS);
	}

	var template = function(data) {
		return render.call(this, data, DS);
	};

	// Provide the compiled function source as a convenience for precompilation.
	template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

	return template;
};

  DS.popup = (function() {
    var close, img, init, isClosed, isCompV, prefix, resize, setup, show;
    setup = {};
    img = null;
    prefix = 'digiseller-popup-';
    isCompV = document.compatMode === 'CSS1Compat';
    isClosed = true;
    show = function(onResize) {
      setup.$container.show();
      DS.$(window).on('resize-popup', onResize);
      onResize();
    };
    close = function(e) {
      if (isClosed) {
        return;
      }
      if (e) {
        DS.util.prevent(e);
      }
      setup.$img.html('');
      setup.$main.hide();
      DS.$(window).off('resize-popup');
      isClosed = true;
      img = null;
    };
    resize = function(h, w, isHard) {
      var body, doc, h1, hs, isDec, scale0, topScroll, w1, wih, wiw, ws;
      wih = window.innerHeight;
      hs = (typeof wih !== 'undefined' ? wih : document[isCompV ? 'documentElement' : 'body'].offsetHeight - 22) - 100;
      if (!isHard) {
        scale0 = h / w;
        wiw = window.innerWidth;
        ws = (typeof wiw !== 'undefined' ? wiw : document[isCompV ? 'documentElement' : 'body'].offsetWidth) - 120;
        h1 = hs;
        w1 = ws;
        isDec = false;
        h >= hs && (isDec = true) || (h1 = h);
        w >= ws && (isDec = true) || (w1 = w);
        if (isDec) {
          if (scale0 <= h1 / w1) {
            h1 = Math.round(scale0 * w1);
          } else {
            w1 = Math.round(h1 / scale0);
          }
        }
      }
      doc = document.documentElement;
      body = document.body;
      topScroll = doc && doc.scrollTop || body && body.scrollTop || 0;
      setup.$container.parent().css('top', 20 + topScroll + 'px');
    };
    init = function() {
      var container;
      container = document.createElement('div');
      container.innerHTML = DS.tmpl(DS.tmpls.popup, {
        p: prefix
      });
      DS.el.body.appendChild(container.firstChild);
      DS.util.each(['main', 'fade', 'loader', 'container', 'close', 'img', 'left', 'right'], function(param) {
        setup['$' + param] = DS.$("#" + prefix + param);
      });
      setup.$fade.on('click', close);
      setup.$close.on('click', close);
    };
    return {
      open: function(type, id, onLeft, onRight) {
        !setup.$main && init();
        DS.setAdaptClass(setup.$main);
        if (type !== 'text' && type !== 'cart') {
          setup.$container.html(DS.tmpl(DS.tmpls.photo, {}));
          DS.util.each(['img', 'left', 'right'], function(param) {
            setup['$' + param] = DS.$("#" + prefix + param);
          });
        }
        isClosed = false;
        setup.$container.hide();
        setup.$main.show();
        setup.$left[onLeft ? 'show' : 'hide']();
        if (onLeft) {
          setup.$left.off('click').on('click', onLeft);
        }
        setup.$right[onRight ? 'show' : 'hide']();
        if (onRight) {
          setup.$right.off('click').on('click', onRight);
        }
        setup.$container.parent().removeClass('digiseller-reveal-bag');
        setup.$img.removeClass('digiseller-popup-video');
        setup.$container.parent().removeClass('digiseller-reveal-video');
        switch (type) {
          case 'img':
            img = new Image();
            img.onload = function() {
              var h, w;
              if (isClosed) {
                return;
              }
              h = img.height;
              w = img.width;
              DS.$(window).off('resize-popup');
              show(function() {
                resize(h, w);
              });
              return setup.$img.html('').get(0).appendChild(img);
            };
            img.src = id;
            break;
          default:
            if (type !== 'text' && type !== 'cart') {
              setup.$img.addClass('digiseller-popup-video');
              setup.$container.parent().addClass('digiseller-reveal-video');
            }
            if (type === 'cart') {
              setup.$container.parent().addClass('digiseller-reveal-bag');
            }
            show(function() {
              resize(200, 500, true);
            });
            if (type === 'text' || type === 'cart') {
              setup.$container.html(id);
            } else {
              setup.$img.html(id);
            }
        }
      },
      close: close
    };
  })();

  DS.share = {
    vk: function(title, img) {
      return '//vkontakte.ru/share.php?' + 'url=' + DS.util.enc(document.location) + '&' + 'title=' + DS.util.enc(title) + '&' + 'image=' + DS.util.enc(img) + '&' + 'noparse=true';
    },
    tw: function(title) {
      return '//twitter.com/share?' + 'text=' + DS.util.enc(title) + '&' + 'url=' + DS.util.enc(document.location);
    },
    fb: function(title, img) {
      return '//www.facebook.com/sharer.php?u=' + DS.util.enc(document.location);
    },
    wme: function(title, img) {
      return '//events.webmoney.ru/sharer.aspx?' + 'url=' + DS.util.enc(document.location) + '&' + 'title=' + DS.util.enc(title) + '&' + 'image=' + DS.util.enc(img) + '&' + 'noparse=0';
    }
  };

  DS.showAgreement = function(onOk, index) {
    var agree, that;
    DS.popup.open('text', DS.tmpl(DS.tmpls.agreement, {}));
    that = this;
    agree = function(flag, onAgree) {
      var $rules;
      if (typeof index !== 'undefined') {
        $rules = DS.$('#digiseller-calc-rules-' + index);
        if ($rules.length) {
          $rules.get(0).checked = flag;
        }
      }
      DS.opts.agree = flag ? 1 : 0;
      DS.cookie.set('digiseller-agree', DS.opts.agree);
      DS.popup.close();
      if (onAgree) {
        onAgree();
      }
    };
    DS.$('#digiseller-agree').on('click', function() {
      agree(true, onOk);
    });
    DS.$('#digiseller-disagree').on('click', function() {
      agree(false);
    });
  };

  DS.widget = {
    main: {
      $el: null,
      init: function() {
        this.$el = DS.$('#digiseller-main');
        this.$el.html('');
        DS.eventsDisp.setEventsDisp(this.$el);
      },
      getStatic: function(name) {
        var that;
        that = this;
        return DS.ajax('GET', DS.opts.host + 'shop_menu.asp', {
          $el: this.$el,
          data: {
            seller_id: DS.opts.seller_id,
            menu: name
          },
          onLoad: function(data) {
            if (!data) {
              return false;
            }
            that.$el.html(DS.tmpl(DS.tmpls["static"], data));
            DS.util.scrollUp();
          }
        });
      }
    },
    loader: (function() {
      var _counter, _timeouts;
      _counter = 0;
      _timeouts = [];
      return {
        $el: null,
        init: function() {
          var div;
          div = document.createElement('div');
          div.id = 'digiseller-loader';
          div.className = div.id;
          div.innerHTML = DS.tmpl(DS.tmpls.loader, {});
          DS.el.body.appendChild(div);
          this.$el = DS.$("#" + div.id).hide();
        },
        show: function(uid) {
          var that;
          that = this;
          _timeouts[uid] = setTimeout(function() {
            _timeouts[uid] = 0;
            _counter++;
            that.$el.show();
          }, 1000);
        },
        hide: function(uid) {
          clearTimeout(_timeouts[uid]);
          if (_timeouts[uid] === 0) {
            _counter--;
          }
          delete _timeouts[uid];
          if (_counter <= 0) {
            this.$el.hide();
          }
        }
      };
    })(),
    search: {
      $el: null,
      $input: null,
      prefix: 'digiseller-search',
      init: function() {
        var $form, $header, $inputs, cl, that, timeout;
        this.$el = DS.$("#" + this.prefix);
        if (!this.$el.length) {
          return;
        }
        this.$el.html(DS.tmpls.search);
        $inputs = DS.$('input', this.$el);
        this.$input = $inputs.eq(0);
        $header = DS.$('#digiseller-header');
        $form = DS.$('form', this.$el);
        cl = 'digiseller-search-box-active';
        that = this;
        timeout = null;
        this.$input.on('blur', function() {
          timeout = setTimeout(function() {
            return $header.removeClass(cl);
          }, 200);
        });
        $form.on('submit', function(e) {
          var hash, val;
          DS.util.prevent(e);
          clearTimeout(timeout);
          val = that.$input.val();
          hash = DS.opts.hashPrefix + ("/search?s=" + val);
          $header.addClass(cl);
          that.$input.get(0).focus();
          if (!(val === '' || window.location.hash === hash)) {
            window.location.hash = hash;
          }
        });
      }
    },
    lang: {
      $el: null,
      prefix: 'digiseller-langs',
      init: function() {
        var $menu, visible;
        this.$el = DS.$("#" + this.prefix);
        if (!this.$el.length) {
          return;
        }
        this.$el.html(DS.tmpl(DS.tmpls.langs, {
          cur: DS.opts.currentLang.toLowerCase().substring(0, 2)
        }));
        DS.$('a', this.$el).on('click', function(e) {
          var lang;
          DS.util.prevent(e);
          lang = DS.$(this).attr('data-lang');
          DS.cookie.set('digiseller-lang', lang);
          DS.opts.currentLang = lang;
          window.location.reload();
        });
        $menu = DS.$('ul', this.$el);
        visible = false;
        DS.$('button', this.$el).on('click', function(e) {
          $menu[visible ? 'hide' : 'show']();
          visible = !visible;
        });
      }
    },
    category: {
      $el: null,
      isInited: false,
      prefix: 'digiseller-category',
      init: function() {
        var that;
        this.$el = DS.$("#" + this.prefix);
        this.$elDup = DS.$("#" + this.prefix + "-dup");
        this.$elG = DS.$("#" + this.prefix + "-g");
        if (!(this.$el.length || this.$elDup.length || this.$elG.length)) {
          return;
        }
        this.isInited = false;
        that = this;
        DS.ajax('GET', DS.opts.host + 'shop_categories.asp', {
          data: {
            seller_id: DS.opts.seller_id
          },
          onLoad: function(res) {
            var $aside, $fade, $showBut, body, doc;
            if (!res) {
              return false;
            }
            if (that.$el.length) {
              that.$el.html(that.render(res.category, null, ''));
              DS.eventsDisp.setEventsDisp(that.$el.parent());
            }
            if (that.$elDup.length) {
              that.$elDup.html(that.render(res.category, null, 'dup'));
              DS.eventsDisp.setEventsDisp(that.$elDup.parent());
              $showBut = DS.$("#" + that.prefix + "-dup-show");
              that.$menu = DS.$('#digiseller-off-menu');
              $fade = DS.$('#digiseller-off-menu-fade');
              $aside = DS.$('aside', that.$menu);
              doc = document.documentElement;
              body = document.body;
              $showBut.on('click', function() {
                var scrollTop;
                scrollTop = doc && doc.scrollTop || body && body.scrollTop || 0;
                that.$menu.show();
                $aside.css('top', (scrollTop > 0 ? scrollTop : 0) + 'px');
                return that.adjustHeightDupMenu();
              });
              $fade.on('click', function() {
                return that.$menu.hide();
              });
            }
            if (that.$elG.length) {
              that.$elG.html(that.render(res.category, null, 'g'));
              DS.eventsDisp.setEventsDisp(that.$elG.parent());
              that.initMoreFunc();
            }
            that.isInited = true;
            that.mark();
          }
        });
      },
      initMoreFunc: function() {
        var $els, $nav, $section, $ul, contW, container, divide_ind, i, len, width;
        $ul = this.$elG.children();
        $els = $ul.children();
        $nav = this.$elG.parent();
        contW = $nav.get(0).offsetWidth - 150;
        width = 0;
        divide_ind = 0;
        len = $els.length;
        $els.each(function(el) {
          width += el.offsetWidth;
          if (width > contW) {
            return false;
          }
          return divide_ind++;
        });
        if (divide_ind > 0 && divide_ind !== len) {
          container = document.createElement('div');
          this.$elG.children().get(0).innerHTML = DS.tmpl(DS.tmpls.catMore, {});
          $section = DS.$('#digiseller-cat-first');
          $ul = DS.$('#digiseller-cat-more');
          i = 0;
          $els.each(function(el) {
            var clone;
            clone = el.cloneNode(true);
            (i < divide_ind ? $section : $ul).get(0).appendChild(clone);
            return i++;
          });
          DS.$('#digiseller-cat-more-count').html(DS.opts.i18n['More'] + ' ' + (len - divide_ind));
        }
      },
      adjustHeightDupMenu: function() {
        var $sub;
        $sub = DS.$('#digiseller-category-sub-dup-' + this.curCid);
        if (!$sub.length) {
          $sub = DS.$('#digiseller-category-dup-' + this.curCid).parent();
        }
        if ($sub.length && $sub.get(0).offsetHeight) {
          DS.$('#digiseller-category-dup').parent().css('height', $sub.get(0).offsetHeight);
        }
      },
      mark: (function() {
        var _go, _make;
        _make = function(cid, $el, suffix) {
          var $ancestor, $cat, $cats, $nav, $parent, $sub, $subs, deep, nextLeft;
          $cats = DS.$('li', $el);
          if (!$cats.length) {
            return;
          }
          $subs = DS.$('ul', $el);
          $subs.hide();
          $subs.eq(0).show();
          $cats.removeClass("" + this.prefix + "-active");
          $cats.removeClass("" + this.prefix + "-moved");
          $nav = $el.parent();
          if (!cid) {
            $el.css('left', '0%');
            $nav.css('height', '');
            this.$menu.hide();
            return;
          }
          $cat = DS.$('#' + this.prefix + '-' + (suffix ? suffix + '-' : '') + cid);
          if (!$cat.length) {
            return;
          }
          $cat.addClass("" + this.prefix + "-active");
          $cat.addClass("" + this.prefix + "-moved");
          $parent = $ancestor = $cat;
          deep = 0;
          while ($parent.get(0).id !== this.prefix + (suffix ? '-' + suffix : '')) {
            $parent.show();
            $parent = $parent.parent();
            if (/li/i.test($parent.get(0).nodeName)) {
              $parent.addClass("" + this.prefix + "-moved");
              deep++;
            }
          }
          if (suffix === 'dup') {
            $sub = DS.$('#' + this.prefix + '-sub-dup-' + cid).show();
            nextLeft = ($sub.length ? deep + 1 : deep) * 100;
            $el.css('left', '-' + nextLeft + '%').attr('data-cur-left', nextLeft);
            if (!$sub.length) {
              this.$menu.hide();
            }
            this.adjustHeightDupMenu();
          }
        };
        _go = function(cid) {
          this.curCid = cid;
          if (this.$el && this.$el.length) {
            _make.call(this, cid, this.$el, '');
          }
          if (this.$elDup && this.$elDup.length) {
            _make.call(this, cid, this.$elDup, 'dup');
          }
          if (this.$elG && this.$elG.length) {
            return _make.call(this, cid, this.$elG, 'g');
          }
        };
        return function(cid) {
          var count, interval, that;
          if ((!this.$el || !this.$el.length) && (!this.$elDup || !this.$elDup.length) && (!this.$elG || !this.$elG.length)) {
            return;
          }
          if (this.isInited) {
            _go.call(this, cid);
          } else {
            that = this;
            count = 0;
            interval = setInterval(function() {
              if (that.isInited || count > 1000) {
                clearInterval(interval);
                if (that.isInited) {
                  _go.call(that, cid);
                }
              }
              count++;
            }, 50);
          }
        };
      })(),
      render: function(categories, parent, suffix, anc) {
        var out, that, tmpl;
        if (!categories) {
          return '';
        }
        out = '';
        tmpl = DS.tmpl(DS.tmpls.category);
        that = this;
        DS.util.each(categories, function(category) {
          out += tmpl({
            d: category,
            id: that.prefix + (suffix ? '-' + suffix : '') + '-' + category.id,
            sub: that.render(category.sub, category, suffix, parent)
          });
        });
        return DS.tmpl(DS.tmpls.categories, {
          id: parent && parent.id ? this.prefix + '-sub' + (suffix ? '-' + suffix : '') + '-' + parent.id : '',
          anc_id: anc && anc.id ? anc.id : '',
          parent: parent,
          suffix: suffix,
          out: out
        });
      }
    },
    currency: {
      $el: null,
      init: function() {
        var $select;
        this.$el = DS.$('#digiseller-currency');
        if (!this.$el.length) {
          return;
        }
        this.$el.html(DS.tmpl(DS.tmpls.currency, {}));
        $select = DS.$('select', this.$el);
        $select.val(DS.opts.currency).on('change', function(e) {
          var $this, type;
          $this = DS.$(this);
          type = $this.attr('data-type');
          DS.opts.currency = $select.val();
          DS.cookie.set('digiseller-currency', DS.opts.currency);
          DS.historyClick.reload();
        });
      }
    },
    pager: (function() {
      function _Class($el, opts) {
        this.$el = $el;
        opts = opts || {};
        this.page = opts.page || 1;
        this.rows = opts.rows || 10;
        this.total = opts.total || 0;
        this.opts = {
          tmpl: opts.tmpl || DS.tmpls.pages,
          max: opts.max || 2,
          getLink: opts.getLink || function(page) {
            return page;
          },
          onChangeRows: opts.onChangeRows || function(rows) {}
        };
        return;
      }

      _Class.prototype.mark = function() {
        var $pages, that;
        $pages = DS.$('a', this.$el);
        that = this;
        $pages.each(function(el) {
          var $page;
          $page = DS.$(el);
          $page.parent()[that.page === parseInt($page.attr('data-page')) ? 'addClass' : 'removeClass']('digiseller-current');
        });
        return this;
      };

      _Class.prototype.render = function() {
        var left, out, page, right, that, tr;
        this.page = parseInt(this.page);
        this.rows = parseInt(this.rows);
        this.total = parseInt(this.total);
        this.$el[this.total ? 'show' : 'hide']();
        out = '';
        if (this.total > 1) {
          left = this.page - this.opts.max;
          left = left < 1 ? 1 : left;
          right = this.page + this.opts.max;
          right = right > this.total ? this.total : right;
          page = left;
          while (page <= right) {
            out += this.opts.getLink(page);
            page++;
          }
          tr = '<li class="digiseller-unavailable"><a href="">…</a></li>';
          if (left > 1) {
            out = this.opts.getLink(1) + (left > 2 ? tr : '') + out;
          }
          if (right < this.total) {
            out = out + (right < this.total - 1 ? tr : '') + this.opts.getLink(this.total);
          }
        }
        this.$el.html(DS.tmpl(this.opts.tmpl, {
          out: out
        }));
        that = this;
        DS.$('select', this.$el).val(this.rows).on('change', function(e) {
          var $this;
          $this = DS.$(this);
          that.rows = $this.val();
          that.opts.onChangeRows(that.rows);
        });
        this.mark();
        return this;
      };

      return _Class;

    })(),
    comments: (function() {
      function _Class($el, product_id, beforeRender) {
        this.$el = $el;
        this.product_id = product_id;
        this.beforeRender = beforeRender;
        this.isInited = false;
        this.type = '';
        this.page = 1;
        this.rows = 10;
        this.pager = null;
        return;
      }

      _Class.prototype.get = function() {
        var that;
        that = this;
        DS.ajax('GET', DS.opts.host + 'shop_reviews.asp', {
          $el: this.$el,
          data: {
            seller_id: DS.opts.seller_id,
            product_id: this.product_id,
            type: this.type,
            page: this.page,
            rows: this.rows
          },
          onLoad: function(data) {
            if (!data) {
              return false;
            }
            that.render(data);
          }
        });
      };

      _Class.prototype.render = function(data) {
        var comments, out, tmpl;
        comments = data.review;
        out = '';
        if (!comments) {
          out = DS.tmpl(DS.tmpls.nothing, {});
        } else {
          tmpl = DS.tmpl(DS.tmpls.comment);
          DS.util.each(comments, function(comment) {
            out += tmpl({
              d: comment
            });
          });
        }
        if (this.isInited) {
          DS.util.extend(this.pager, {
            page: this.page,
            rows: this.rows,
            total: data.totalPages
          });
          this.pager.render();
        } else {
          this.beforeRender(data);
          this.container = DS.$('.digiseller-js-comments', this.$el);
          this.isInited = true;
        }
        this.container.html(out);
      };

      return _Class;

    })(),
    calc: (function() {
      var _els, _index, _prefix;

      _els = ['amount', 'cnt', 'cntSelect', 'currency', 'amountR', 'price', 'buy', 'limit', 'rules', 'cart', 'method', 'curadd', 'agreement'];

      _prefix = 'digiseller-calc';

      _index = 0;

      function _Class($context, data) {
        var that;
        this.$context = $context;
        this.index = _index++;
        this.id = data ? data.id : this.$context.attr('data-id');
        if (data) {
          this.renderInit(data);
          this.init();
        } else {
          that = this;
          DS.ajax('GET', DS.opts.host + 'shop_product_info.asp', {
            $el: this.$context,
            data: {
              seller_id: DS.opts.seller_id,
              product_id: this.id,
              currency: DS.opts.currency
            },
            onLoad: function(data) {
              var _ref;
              if (!data) {
                return false;
              }
              if ((_ref = data.product) != null) {
                _ref.no_cart = 1;
              }
              that.renderInit(data.product);
              that.init();
            }
          });
        }
        return;
      }

      _Class.prototype.renderInit = function(data) {
        if (!data) {
          this.$context.html(DS.tmpl(DS.tmpls.nothing, {}));
        } else {
          this.$context.html(DS.tmpl(DS.tmpls.buy, {
            d: data,
            index: this.index,
            ai: this.$context.attr('data-ai'),
            imgSize: this.$context.attr('data-img-size'),
            needImg: this.$context.attr('data-img') === '1' ? true : false,
            needName: this.$context.attr('data-name') === '1' ? true : false,
            noPrice: this.$context.attr('data-no-price') === '1' ? true : false,
            failPage: DS.util.enc(window.location),
            agree: DS.opts.agree
          }));
        }
      };

      _Class.prototype.init = function() {
        var $curAddSelects, $currencyOpts, $optionsCont, $parentRules, debouncedGet, onChangeCurAdd, onChangeCurrency, rules, that;
        this.$ = {
          container: DS.$("#" + _prefix + "-" + this.index)
        };
        if (!this.$.container.length) {
          return;
        }
        that = this;
        DS.util.each(_els, function(el) {
          that.$[el] = DS.$("#" + _prefix + "-" + el + "-" + that.index);
        });
        debouncedGet = DS.util.debounce(function(type) {
          that.get(type);
        });
        DS.$('.digiseller-button', this.$context).on('click', function(e) {
          DS.util.prevent(e);
          that.buy(DS.$(this));
        });
        this.$.agreement.on('click', function(e) {
          DS.util.prevent(e);
          DS.showAgreement(null, that.index);
        });
        if (this.$.amount.length) {
          if (this.$.cnt.length) {
            this.$.amount.on('keyup', function() {
              debouncedGet('amount');
            });
            this.$.cnt.on('keyup', function() {
              debouncedGet('cnt');
            });
          }
          this.$.cntSelect.on('change', function() {
            that.get('cnt');
          });
        }
        onChangeCurrency = function(withoutGet) {
          var $curAdd, cl, index, vars;
          index = that.$.currency.get(0).selectedIndex;
          $curAdd = $curAddSelects.eq(index);
          vars = parseInt($curAdd.attr('data-vars'));
          $curAddSelects.hide();
          cl = 'digiseller-pricing-table-select';
          if (vars > 1) {
            $curAdd.show();
            that.$.method.parent().removeClass(cl);
          } else {
            that.$.method.parent().addClass(cl);
          }
          return onChangeCurAdd($curAdd, withoutGet);
        };
        $currencyOpts = DS.$('option', this.$.currency);
        onChangeCurAdd = function($this, withoutGet) {
          var index, val;
          index = $this.attr('data-index');
          val = $this.val();
          that.$.currency.get(0).selectedIndex = index;
          $currencyOpts.eq(index).val(val);
          if (!withoutGet) {
            that.get();
          }
        };
        $curAddSelects = DS.$('select', this.$.curadd);
        $curAddSelects.on('change', function() {
          return onChangeCurAdd(DS.$(this));
        });
        this.$.currency.on('change', function() {
          return onChangeCurrency();
        });
        onChangeCurrency(true);
        $optionsCont = DS.$("#digiseller-calc-options-" + this.index);
        if ($optionsCont.length) {
          this.$.options = DS.$('input[type="radio"], input[type="checkbox"], select', $optionsCont);
          this.$.options.on('change', function() {
            that.get();
          });
        }
        this.get();
        if (that.$.rules.length) {
          $parentRules = that.$.rules.parent();
          rules = function(flag) {
            return $parentRules[flag && !that.$.rules.get(0).checked ? 'addClass' : 'removeClass']('digiseller-agree-error');
          };
          this.$.buy.on('mouseover', function() {
            rules(true);
          }).on('mouseout', function() {
            rules(false);
          });
          return this.$.cart.on('mouseover', function() {
            rules(true);
          }).on('mouseout', function() {
            rules(false);
          });
        }
      };

      _Class.prototype.get = function(type) {
        var params, that;
        that = this;
        params = {
          p: this.id
        };
        if (type === 'amount') {
          params.a = this.$.amount.val();
        } else {
          params.n = this.$.cntSelect.length ? this.$.cntSelect.val() : this.$.cnt.val() || 0;
          this.checkMinMax(params.n);
        }
        params.c = this.$.currency.val();
        params.x = '<response>';
        if (this.$.options) {
          this.$.options.each(function(el) {
            var val;
            switch (el.nodeName) {
              case 'SELECT':
                params.x += '<option O="' + el.name.replace('option_select_', '') + '" V="' + DS.$(el).val() + '"/>';
                break;
              default:
                if (el.checked) {
                  val = DS.$(el).val();
                  params.x += '<option O="' + el.name.replace('option_checkbox_', '').replace('-' + val, '').replace('option_radio_', '') + '" V="' + DS.$(el).val() + '"/>';
                }
            }
          });
        }
        params.x += '</response>';
        DS.ajax('GET', '//www.oplata.info/asp2/price_options.asp', {
          $el: this.$.container,
          data: params,
          onLoad: function(res) {
            if (!res) {
              return false;
            }
            that.render(res);
          }
        });
      };

      _Class.prototype.checkMinMax = function(cnt) {
        var max, min, minmax, that;
        that = this;
        cnt = parseInt(cnt);
        max = parseInt(this.$.buy.attr('data-max'));
        min = parseInt(this.$.buy.attr('data-min'));
        minmax = function(val, flag) {
          that.disable(true);
          that.$.limit.html(DS.tmpl(DS.tmpls.minmax, {
            val: val,
            flag: flag
          })).show();
        };
        if (max && cnt > max) {
          minmax(max, true);
          return;
        } else if (min && cnt < min) {
          minmax(min, false);
          return;
        }
        this.disable(false);
        this.$.limit.hide();
      };

      _Class.prototype.render = function(data) {
        if (!data) {
          return false;
        }
        this.$.amount.val(data.amount);
        this.$.price.html(data.amount + ' ' + data.curr);
        if (this.$.cnt.length && data.cnt) {
          this.checkMinMax(data.cnt);
          this.$.cnt.val(data.cnt);
        }
        if (this.$.cntSelect.length && data.curr) {
          this.$.cntSelect.val(data.curr);
        }
        this.$.amountR.html(data.curr);
        if (data.amount === '0') {
          this.disable(true);
        }
      };

      _Class.prototype.disable = function(disabled) {
        var go;
        go = function($el) {
          return $el[disabled ? 'addClass' : 'removeClass']('digiseller-cart-btn-disabled');
        };
        go(this.$.buy);
        go(this.$.cart);
      };

      _Class.prototype.buy = function($el) {
        var $error, $form, $parent, $rules, ai, buy, data, error, id, isCart, isChecked, isForm, name, needCheck, prefixBuy, prefixCalc, required$Els;
        id = $el.attr('data-id');
        isForm = parseInt($el.attr('data-form'));
        isCart = parseInt($el.attr('data-cart'));
        ai = $el.attr('data-ai');
        prefixBuy = 'digiseller-buy';
        prefixCalc = 'digiseller-calc';
        if (isForm) {
          $form = DS.$("#" + prefixBuy + "-form-" + id + "-" + this.index);
          $error = DS.$("#" + prefixBuy + "-error-" + id + "-" + this.index);
          $rules = DS.$("#" + prefixCalc + "-rules-" + this.index);
          if ($rules.length) {
            isChecked = $rules.get(0).checked;
            DS.opts.agree = isChecked ? 1 : 0;
            DS.cookie.set('digiseller-agree', DS.opts.agree);
            if (!isChecked) {
              return;
            }
          }
          needCheck = $form.attr('data-need-check') === '1';
          required$Els = {};
          data = DS.serialize($form.get(0), function(el) {
            var $parent;
            $parent = DS.$(el).parent();
            if ($parent.attr('data-required')) {
              return required$Els[el.name] = $parent;
            }
          });
          error = false;
          DS.$("." + prefixCalc + "-line", $form).removeClass(prefixCalc + '-line-err');
          for (name in required$Els) {
            $parent = required$Els[name];
            if (!DS.util.hasOwnProp(required$Els, name)) {
              continue;
            }
            if (!data[name]) {
              error = true;
              $parent.addClass(prefixCalc + '-line-err');
            }
          }
          $error.html(error ? DS.opts.i18n['someFieldsRequired'] : '');
          $error[error ? 'show' : 'hide']();
          if (error) {
            return;
          }
          if (isCart) {
            data.cart_uid = DS.opts.cart_uid;
          }
          if (!isCart && !needCheck) {
            $form.get(0).submit();
          } else {
            DS.ajax('POST', DS.opts.host + (isCart ? 'shop_cart_add.asp' : 'shop_precheck.asp'), {
              data: data,
              onLoad: function(res, xhr) {
                var hasError;
                hasError = false;
                if (res.cart_err && res.cart_err !== '') {
                  $error.html(res.cart_err).show();
                  hasError = true;
                }
                if (!hasError && !isCart) {
                  $form.get(0).submit();
                }
                if (isCart) {
                  if (res.cart_uid) {
                    DS.opts.cart_uid = res.cart_uid;
                    DS.cookie.set('digiseller-cart_uid', DS.opts.cart_uid);
                  }
                  if (typeof res.cart_cnt !== 'undefined') {
                    DS.widget.cartButton.setCount(res.cart_cnt);
                  }
                  if (!hasError) {
                    new DS.widget.cart();
                  }
                }
              }
            });
          }
        } else {
          buy = function() {
            window.open(("https://www.oplata.info/asp/pay_wm.asp?id_d=" + id) + (ai !== null ? "&ai=" + ai : '') + ("&dsn=limit&lang=" + DS.opts.currentLang), DS.opts.buyTargetSelf === 1 ? '_self' : '_blank');
          };
          if (DS.opts.agreement_text) {
            DS.showAgreement(buy, this.index);
          } else {
            buy();
          }
        }
      };

      return _Class;

    })(),
    cartButton: {
      $el: null,
      prefix: 'digiseller-cart',
      init: function() {
        this.$el = DS.$("#" + this.prefix + "-btn");
        if (!this.$el.length) {
          return;
        }
        DS.opts.hasCart = true;
        this.$el.html(DS.tmpl(DS.tmpls.cartButton, {
          count: DS.opts.cart_cnt
        }));
        DS.$('a', this.$el).on('click', function(e) {
          DS.util.prevent(e);
          new DS.widget.cart();
        });
      },
      setCount: function(count) {
        DS.$("#" + this.prefix + "-count").html(count);
        DS.$("#" + this.prefix + "-empty")[count ? 'removeClass' : 'addClass'](this.prefix + '-btn-empty');
      }
    },
    cart: (function() {
      var _prefix;

      _prefix = 'digiseller-cart';

      function _Class(currency) {
        this.currency = currency;
        this.get();
      }

      _Class.prototype.get = function() {
        var that;
        that = this;
        DS.ajax('GET', DS.opts.host + 'shop_cart_lst.asp', {
          $el: DS.widget.cartButton.$el,
          data: {
            cart_uid: DS.opts.cart_uid,
            cart_curr: this.currency || ''
          },
          onLoad: function(res) {
            if (!res || !res.products) {
              return false;
            }
            that.render(res);
          }
        });
      };

      _Class.prototype.render = function(res) {
        var count, items, tmpl;
        items = '';
        tmpl = DS.tmpl(DS.tmpls.cartItem);
        count = 0;
        if (res.products) {
          DS.util.each(res.products, function(product, i) {
            count++;
            items += tmpl({
              d: product,
              even: !!(i % 2)
            });
          });
        }
        DS.widget.cartButton.setCount(count);
        DS.popup.open('cart', DS.tmpl(DS.tmpls.cart, {
          d: res,
          failPage: DS.util.enc(window.location),
          items: items
        }));
        this.init(res);
      };

      _Class.prototype.init = function(res) {
        var $context, $select, changeCount, that;
        $context = DS.$("#" + _prefix + "-items");
        if (!$context.length) {
          return;
        }
        that = this;
        changeCount = DS.util.debounce(function($this, isDel) {
          that.changeCount($this, isDel);
        });
        DS.$('.digiseller-delete-bag', $context).on('click', function(e) {
          DS.util.prevent(e);
          that.changeCount(DS.$(this), true);
        });
        DS.$('input', $context).on('change', function(e) {
          changeCount(DS.$(this));
        }).on('keyup', function(e) {
          changeCount(DS.$(this));
        });
        DS.$("." + _prefix + "-params-toggle", $context).on('click', function(e) {
          var $el, isOpened;
          DS.util.prevent(e);
          $el = DS.$(this.parentNode);
          isOpened = $el.attr('data-opened') === '1';
          $el[isOpened ? 'removeClass' : 'addClass'](_prefix + '-show-params').attr('data-opened', isOpened ? 0 : 1);
        });
        $select = DS.$("#" + _prefix + "-currency");
        $select.val(res.currency).on('change', function(e) {
          new DS.widget.cart($select.val());
        });
        this.$go = DS.$("#" + _prefix + "-go");
        this.$go.on('click', function(e) {
          DS.util.prevent(e);
          if (that.$go.attr('data-disabled') === '1') {
            return;
          }
          this.parentNode.submit();
        });
        this.$amount = DS.$("#" + _prefix + "-amount");
        this.$amountCont = DS.$("#" + _prefix + "-amount-cont");
      };

      _Class.prototype.update = function(res, id) {
        var count, hasError, idForDel, items;
        items = (res && res.products ? res.products : []);
        idForDel = id;
        this.$amount.html(res.amount);
        hasError = false;
        count = 0;
        if (!items.length) {
          this.disable(true);
        } else {
          DS.util.each(items, function(item, i) {
            var $error, $item;
            count++;
            if (item.item_id === id) {
              idForDel = false;
            }
            $item = DS.$("#" + _prefix + "-item-" + item.item_id);
            $error = DS.$("#" + _prefix + "-item-error-" + item.item_id);
            if (item.error) {
              $item.addClass('digiseller-not-available');
              $item.attr('data-error', 1);
              $error.show();
              $error.html(item.error);
            } else if (item.item_id === id) {
              $item.removeClass('digiseller-not-available');
              $item.attr('data-error', 0);
              $error.hide();
            }
            if ($item.attr('data-error') === '1') {
              hasError = true;
            }
          });
          this.disable(hasError);
        }
        DS.widget.cartButton.setCount(count);
        if (idForDel) {
          DS.$("#" + _prefix + "-item-" + idForDel).remove();
          DS.$("#" + _prefix + "-item-error-" + idForDel).remove();
        }
      };

      _Class.prototype.disable = function(disable) {
        this.$go[disable ? 'addClass' : 'removeClass'](_prefix + '-btn-disabled').attr('data-disabled', disable ? '1' : '0');
        this.$amountCont[disable ? 'hide' : 'show']();
      };

      _Class.prototype.changeCount = function($this, isDel) {
        var $count, $item, count, id, newCount, parsedCnt, that;
        id = $this.attr('data-id');
        $item = DS.$("#" + _prefix + "-item-" + id);
        $count = isDel ? DS.$("#" + _prefix + "-item-count-" + id) : $this;
        count = isDel ? 0 : $count.val();
        parsedCnt = parseInt(count);
        that = this;
        if (!isDel && !parsedCnt && parsedCnt != count) {
          newCount = parsedCnt || 1;
          $count.val(newCount);
          parsedCnt = newCount;
        }
        DS.ajax('GET', DS.opts.host + 'shop_cart_lst.asp', {
          $el: $this,
          data: {
            cart_uid: DS.opts.cart_uid,
            item_id: id,
            product_cnt: parsedCnt
          },
          onLoad: function(res) {
            if (!res) {
              return false;
            }
            that.update(res, id);
          }
        });
      };

      return _Class;

    })()
  };

  DS.route = {
    home: {
      url: '/home',
      action: function() {
        DS.widget.category.mark();
        this.get();
      },
      get: function() {
        var that;
        that = this;
        DS.ajax('GET', DS.opts.host + 'shop_products.asp', {
          $el: DS.widget.main.$el,
          data: {
            seller_id: DS.opts.seller_id,
            category_id: 0,
            order: DS.opts.sort,
            currency: DS.opts.currency
          },
          onLoad: function(data) {
            if (!data) {
              return false;
            }
            that.render(data);
            DS.util.scrollUp();
          }
        });
      },
      render: function(data) {
        var articles, out, tmpl;
        out = '';
        articles = data.product;
        if (articles && articles.length) {
          tmpl = DS.tmpl(DS.tmpls['article' + DS.opts.main_view.charAt(0).toUpperCase() + DS.opts.main_view.slice(1)]);
          DS.util.each(articles, function(article) {
            out += tmpl({
              d: article,
              url: DS.opts.hashPrefix + ("/detail/" + article.id),
              imgsize: DS.opts.main_view === 'tile' ? DS.opts.imgsize_firstpage : DS.opts.imgsize_listpage
            });
          });
        }
        DS.widget.main.$el.html(DS.tmpl(DS.tmpls.showcaseArticles, {
          out: DS.opts.main_view === 'table' && false ? '<table class="digiseller-table">' + out + '</table>' : out,
          categories: data.categories
        }));
      }
    },
    search: {
      url: '/search(?:/([0-9]*))?\\?s=(.*)',
      search: null,
      page: null,
      rows: null,
      pager: null,
      prefix: 'digiseller-search',
      action: function(params) {
        this.search = decodeURIComponent(params[2]);
        this.page = parseInt(params[1]) || 1;
        this.rows = DS.opts.rows;
        DS.widget.category.mark();
        DS.widget.search.$input.val(this.search);
        this.get();
      },
      get: function() {
        var that;
        that = this;
        DS.ajax('GET', DS.opts.host + 'shop_search.asp', {
          $el: DS.widget.main.$el,
          data: {
            seller_id: DS.opts.seller_id,
            currency: DS.opts.currency,
            page: this.page,
            rows: this.rows,
            search: this.search
          },
          onLoad: function(data) {
            if (!data) {
              return false;
            }
            that.render(data);
            DS.util.scrollUp();
          }
        });
      },
      render: function(data) {
        var $container, articles, out, that, tmpl;
        out = '';
        articles = data.product;
        if (!articles || !articles.length) {
          out = DS.tmpl(DS.tmpls.nothing, {});
        } else {
          tmpl = DS.tmpl(DS.tmpls.searchResult);
          DS.util.each(articles, function(article) {
            out += tmpl({
              url: DS.opts.hashPrefix + ("/detail/" + article.id),
              d: article
            });
          });
        }
        $container = DS.$("#" + this.prefix + "-results");
        if ($container.length) {
          $container.html(out);
          this.pager.page = this.page;
          this.pager.rows = this.rows;
          this.pager.total = data.totalPages;
          this.pager.render();
        } else {
          DS.widget.main.$el.html(DS.tmpl(DS.tmpls.searchResults, {
            totalItems: data.totalItems,
            out: out
          }));
          that = this;
          tmpl = DS.tmpl(DS.tmpls.page);
          this.pager = new DS.widget.pager(DS.$('#digiseller-search-paging'), {
            page: this.page,
            rows: this.rows,
            total: data.totalPages,
            getLink: function(page) {
              return tmpl({
                page: page,
                url: DS.opts.hashPrefix + ("/search/" + page + "?s=" + that.search)
              });
            },
            onChangeRows: function(rows) {
              DS.opts.rows = rows;
              DS.cookie.set(DS.route.articles.prefix + '-rows', rows);
              that.page = 1;
              that.rows = rows;
              that.get();
              DS.historyClick.changeHashSilent(DS.opts.hashPrefix + ("/search/1?s=" + that.search));
            }
          }).render();
          DS.widget.currency.init();
        }
        DS.$("#" + this.prefix + "-query").html(this.search.replace(/</g, '&lt;').replace(/>/g, '&gt;'));
        DS.$("#" + this.prefix + "-total").html(data.totalItems);
      }
    },
    articles: {
      url: '/articles/([0-9]*)(?:/([0-9]*))?',
      cid: null,
      page: 1,
      rows: null,
      pager: null,
      pagerComments: null,
      prefix: 'digiseller-articles',
      action: function(params) {
        this.cid = params[1];
        this.page = parseInt(params[2]) || 1;
        this.rows = DS.opts.rows;
        this.get();
      },
      get: function() {
        var that;
        DS.widget.category.mark(this.cid);
        that = this;
        DS.ajax('GET', DS.opts.host + 'shop_products.asp', {
          $el: DS.widget.main.$el,
          data: {
            seller_id: DS.opts.seller_id,
            category_id: this.cid,
            page: this.page,
            rows: this.rows,
            order: DS.opts.sort,
            currency: DS.opts.currency
          },
          onLoad: function(data) {
            if (!data) {
              return false;
            }
            that.render(data);
            DS.util.scrollUp();
          }
        });
      },
      render: function(data) {
        var $container, articles, out, set, that, tmpl;
        out = '';
        data.totalPages = parseInt(data.totalPages);
        articles = data.product;
        if (!articles || !articles.length) {
          out = DS.tmpl(DS.tmpls.nothing, {});
        } else {
          tmpl = DS.tmpl(DS.tmpls['article' + DS.opts.view.charAt(0).toUpperCase() + DS.opts.view.slice(1)]);
          DS.util.each(articles, function(article) {
            out += tmpl({
              d: article,
              url: DS.opts.hashPrefix + ("/detail/" + article.id),
              imgsize: DS.opts.view === 'tile' ? DS.opts.imgsize_firstpage : DS.opts.imgsize_listpage
            });
          });
        }
        $container = DS.$("#" + this.prefix + "-" + this.cid);
        if ($container.length) {
          $container.html(DS.opts.view === 'table' && false ? '<table class="digiseller-table">' + out + '</table>' : out);
          this.pager.page = this.page;
          this.pager.rows = this.rows;
          this.pager.total = data.totalPages;
          this.pager.render();
        } else {
          DS.widget.main.$el.html(DS.tmpl(DS.tmpls.articles, {
            id: this.prefix + '-' + this.cid,
            d: data,
            hasCategories: !data.categories || !data.categories.length ? false : true,
            articlesPanel: data.totalPages ? DS.tmpl(DS.tmpls.articlesPanel, {}) : '',
            out: out
          }));
          if (data.totalPages) {
            that = this;
            tmpl = DS.tmpl(DS.tmpls.page);
            this.pager = new DS.widget.pager(DS.$("#" + this.prefix + "-" + this.cid + "-paging", DS.widget.main.$el), {
              page: this.page,
              rows: this.rows,
              total: data.totalPages,
              getLink: function(page) {
                return tmpl({
                  page: page,
                  url: DS.opts.hashPrefix + ("/articles/" + that.cid + "/" + page)
                });
              },
              onChangeRows: function(rows) {
                DS.opts.rows = rows;
                DS.cookie.set(that.prefix + '-rows', rows);
                that.page = 1;
                that.rows = rows;
                that.get();
                DS.historyClick.changeHashSilent(DS.opts.hashPrefix + ("/articles/" + that.cid + "/1"));
              }
            }).render();
            DS.widget.currency.init();
            set = function(param) {
              var $select;
              $select = DS.$("#digiseller-" + param + " select");
              $select.on('change', function(e) {
                DS.opts[param] = $select.val();
                DS.cookie.set(that.prefix + ("-" + param), DS.opts[param]);
                that.get();
              }).val(DS.opts[param]);
            };
            DS.util.each(['sort', 'view'], function(param) {
              set(param);
            });
          }
        }
      }
    },
    article: {
      url: '/detail(?:/([0-9]*))',
      comments: null,
      id: null,
      prefix: 'digiseller-article',
      action: function(params) {
        var that;
        this.id = params[1] || 0;
        that = this;
        DS.ajax('GET', DS.opts.host + 'shop_product_info.asp', {
          $el: DS.widget.main.$el,
          data: {
            seller_id: DS.opts.seller_id,
            product_id: this.id,
            currency: DS.opts.currency
          },
          onLoad: function(data) {
            if (!data) {
              return false;
            }
            that.render(data);
            DS.util.scrollUp();
          }
        });
      },
      render: function(data) {
        var $container, $preview, $previewImg, $slider, $thumbs, $wrapper, activeClass, onClick, onSlide, sliderWidth, templHasDiscounts, thCount, thWidth, that;
        if (!data || !data.product) {
          DS.widget.main.$el.html(DS.tmpl(DS.tmpls.nothing, {}));
          return;
        }
        templHasDiscounts = (data.product.units && data.product.units.discounts) || (data.product.discounts && data.product.discounts.length);
        DS.widget.category.mark(data.product.category_id);
        DS.widget.main.$el.html(DS.tmpl(DS.tmpls.articleDetail, {
          d: data.product,
          templHasDiscounts: templHasDiscounts,
          thCount: ((data.product.preview_imgs && data.product.preview_imgs.length) || 0) + ((data.product.preview_videos && data.product.preview_videos.length) || 0)
        }));
        if (!templHasDiscounts) {
          DS.route.article.initComments();
        }
        new DS.widget.calc(DS.$("#" + this.prefix + "-buy-context"), data.product);
        new DS.widget.calc(DS.$("#" + this.prefix + "-buy-context2"), data.product);
        DS.widget.currency.init();
        that = this;
        $container = DS.$("#" + this.prefix + "-thumbs");
        if ($container.length) {
          $thumbs = DS.$('a', $container);
          $preview = DS.$("#" + this.prefix + "-img-preview");
          $previewImg = DS.$('img', $preview);
          activeClass = 'digiseller-left-thumbs-active';
          onClick = function($el) {
            var $next, $prev, id, index, type;
            type = $el.attr('data-type');
            index = parseInt($el.attr('data-index'));
            id = type === 'img' ? $el.attr('href') : $el.attr('data-id');
            $prev = $thumbs.eq(index - 1);
            $next = $thumbs.eq(index + 1);
            DS.popup.open(type, (type === 'img' ? id : DS.tmpl(DS.tmpls.video, {
              id: id,
              type: type
            })), $prev.length ? function() {
              onClick($prev);
            } : false, $next.length ? function() {
              onClick($next);
            } : false);
          };
          $thumbs.on('click', function(e) {
            DS.util.prevent(e);
            onClick(DS.$(this));
          }).on('mouseover', function(e) {
            var $this, id, index, previewImg;
            $this = DS.$(this);
            if ($this.attr('data-type') !== 'img') {
              return;
            }
            $thumbs.removeClass(activeClass, true);
            $this.addClass(activeClass);
            index = $this.attr('data-index');
            id = $this.attr('data-id');
            $preview.attr('data-index', index);
            previewImg = $previewImg.get(0);
            previewImg.src = previewImg.src.replace(/idp=[0-9]+&/, "idp=" + id + "&");
          });
          $preview.on('click', function(e) {
            var index;
            DS.util.prevent(e);
            index = parseInt($preview.attr('data-index'));
            onClick($thumbs.eq(index));
          });
          $wrapper = DS.$('#digiseller-thumbs-wrapper');
          $slider = DS.$('#digiseller-thumbs-slider');
          thWidth = 91;
          thCount = parseInt($wrapper.attr('data-count'));
          sliderWidth = thWidth * thCount;
          onSlide = function(isNext) {
            var curLeft, left, showed, toShow, wrWidth;
            wrWidth = $wrapper.get(0).offsetWidth;
            curLeft = Math.abs(parseInt($slider.css('left')) || 0);
            showed = Math[(isNext ? 'floor' : 'ceil')]((curLeft + (isNext ? wrWidth : 0)) / thWidth);
            toShow = showed + (isNext ? 1 : -1);
            if (isNext) {
              if (toShow >= thCount) {
                toShow = thCount;
              }
            } else {
              if (toShow <= 0) {
                toShow = 0;
              }
            }
            left = -(curLeft + (toShow * thWidth - (curLeft + (isNext ? wrWidth : 0))));
            return $slider.css('left', left + 'px');
          };
          DS.$('.digiseller-more-views-arrow', $container).on('click', function(e) {
            var isNext;
            DS.util.prevent(e);
            isNext = DS.$(this).attr('data-next') === '1';
            onSlide(isNext);
          });
        }
      },
      initComments: function(callback) {
        var $el, rowsCookie, that;
        $el = DS.$("#" + this.prefix + "-comments-" + this.id);
        if ($el.attr('data-inited')) {
          if (callback) {
            callback();
          }
          return;
        }
        that = this;
        rowsCookie = 'digiseller-comments-rows';
        this.comments = new DS.widget.comments($el, this.id, function(data) {
          var tmpl;
          $el.attr('data-inited', 1);
          that.comments.$el.html(DS.tmpl(DS.tmpls.comments, {
            totalGood: data.totalGood,
            totalBad: data.totalBad
          }));
          if (callback) {
            callback();
          }
          DS.$('select', $el).on('change', function(e) {
            var $this;
            $this = DS.$(this);
            that.comments.page = 1;
            that.comments.type = DS.$('option', $this).eq(this.selectedIndex).val();
            that.comments.get();
          });
          tmpl = DS.tmpl(DS.tmpls.pageComment);
          that.comments.pager = new DS.widget.pager(DS.$('.digiseller-js-paging', that.comments.$el), {
            page: that.comments.page,
            rows: that.comments.rows,
            total: data.totalPages,
            getLink: function(page) {
              return tmpl({
                page: page,
                url: '#'
              });
            },
            onChangeRows: function(rows) {
              DS.cookie.set(rowsCookie, rows);
              that.comments.page = 1;
              that.comments.rows = rows;
              that.comments.get();
            }
          }).render();
        });
        this.comments.rows = DS.cookie.get(rowsCookie) || 10;
        this.comments.get();
      }
    },
    reviews: {
      url: '/reviews(?:/([0-9]*))?',
      comments: null,
      id: "",
      prefix: 'digiseller-reviews',
      action: function(params) {
        var that;
        if (!this.id || DS.$('#' + this.id).length === 0) {
          this.id = this.prefix + ("-" + (DS.util.getUID()));
          that = this;
          this.comments = new DS.widget.comments(DS.widget.main.$el, '', function(data) {
            that.beforeRender(data);
            DS.util.scrollUp();
          });
        }
        this.comments.page = parseInt(params[1]) || 1;
        this.comments.rows = DS.cookie.get(this.prefix + '-rows') || 10;
        this.comments.get();
      },
      beforeRender: function(data) {
        var $select, goToFirstPage, that, tmpl;
        DS.widget.main.$el.html(DS.tmpl(DS.tmpls.reviews, {
          id: this.id,
          totalGood: data.totalGood,
          totalBad: data.totalBad
        }));
        that = this;
        tmpl = DS.tmpl(DS.tmpls.pageReview);
        goToFirstPage = function() {
          DS.historyClick.changeHashSilent(DS.opts.hashPrefix + '/reviews/1');
        };
        this.comments.pager = new DS.widget.pager(DS.$('.digiseller-js-paging', this.comments.$el), {
          page: this.comments.page,
          rows: this.comments.rows,
          total: data.totalPages,
          getLink: function(page) {
            return tmpl({
              page: page,
              url: DS.opts.hashPrefix + ("/reviews/" + page)
            });
          },
          onChangeRows: function(rows) {
            DS.cookie.set(that.prefix + '-rows', rows);
            that.comments.page = 1;
            that.comments.rows = rows;
            that.comments.get();
            goToFirstPage();
          }
        }).render();
        $select = DS.$("#" + this.prefix + "-type select");
        $select.on('change', function(e) {
          that.comments.page = 1;
          that.comments.type = $select.val();
          that.comments.get();
          goToFirstPage();
        });
      }
    }
  };

  DS.eventsDisp = {
    setEventsDisp: function($context) {
      var callback;
      $context.on('click', function(e) {
        callback(e, 'click');
      });
      callback = function(e, type) {
        var $el, action;
        $el = DS.$(e.originalTarget || e.srcElement);
        action = $el.attr('data-action');
        if (action && typeof DS.eventsDisp[type + '-' + action] === 'function') {
          return DS.eventsDisp[type + '-' + action]($el, e);
        }
      };
    },
    'click-comments-page': function($el, e) {
      var page;
      DS.util.prevent(e);
      page = $el.attr('data-page');
      DS.route.article.comments.page = page;
      DS.route.article.comments.get();
    },
    'click-article-tab': function($el, e) {
      var $panels, $tabs, change, cl, index;
      DS.util.prevent(e);
      index = $el.attr('data-tab');
      $tabs = DS.$('#digiseller-tabs').children();
      $panels = DS.$('#digiseller-tabs-panels').children();
      cl = 'digiseller-active';
      $tabs.removeClass(cl);
      $el.parent().addClass(cl);
      change = function() {
        $panels.removeClass(cl).eq(index).addClass(cl);
      };
      if (index === '1') {
        DS.route.article.initComments(change);
      } else {
        change();
      }
    },
    'click-share': function($el, e) {
      var img, title, type;
      DS.util.prevent(e);
      type = $el.attr('data-type');
      title = $el.attr('data-title');
      img = $el.attr('data-img');
      if (DS.share[type]) {
        window.open(DS.share[type](title, img), "digisellerShare_" + type, DS.util.getPopupParams(626, 436));
      }
    },
    'click-menu': function($el, e) {},
    'click-back': function($el, e) {
      var $cont, $sect, $sub, curLeft, nextHeight, nextLeft, suffix;
      suffix = $el.attr('data-suffix');
      suffix = (suffix ? '-' + suffix : '');
      $sect = DS.$('#digiseller-category' + suffix);
      $sub = DS.$('#digiseller-category-sub' + suffix + '-' + $el.attr('data-anc-id'));
      curLeft = parseInt($sect.attr('data-cur-left')) || 0;
      nextLeft = (!curLeft ? 0 : curLeft - 100);
      nextHeight = ($sub.get(0) || $sect.get(0)).offsetHeight;
      $cont = DS.$('#digiseller-category-dup');
      $cont.css('left', '-' + nextLeft + '%').attr('data-cur-left', nextLeft);
      $cont.parent().css('height', $sub.length ? $sub.get(0).offsetHeight + 'px' : $sect.get(0).offsetHeight + 'px');
    },
    'click-gocat': function($el, e) {
      var cid, hash;
      cid = $el.attr('data-cid');
      hash = DS.opts.hashPrefix + '/articles/' + cid;
      if (window.location.hash === hash) {
        DS.widget.category.mark(cid);
      } else {
        window.location.hash = hash;
      }
    },
    'click-buy': function($el, e) {
      var ai, buy, id;
      id = $el.attr('data-id');
      ai = $el.attr('data-ai');
      buy = function() {
        window.open(("https://www.oplata.info/asp/pay_wm.asp?id_d=" + id) + (ai !== null ? "&ai=" + ai : '') + ("&dsn=limit&lang=" + DS.opts.currentLang), DS.opts.buyTargetSelf === 1 ? '_self' : '_blank');
      };
      if (DS.opts.agreement_text) {
        DS.showAgreement(buy);
      } else {
        buy();
      }
    }
  };

  DS.setAdaptClass = function($el, exact) {
    var width;
    width = DS.$body.get(0).offsetWidth;
    $el.removeClass('digiseller-x-small').removeClass('digiseller-small').removeClass('digiseller-x-medium').removeClass('digiseller-medium').removeClass('digiseller-large');
    if (width <= 640) {
      $el.addClass('digiseller-small');
      if (width <= 465 && exact) {
        return $el.addClass('digiseller-x-small');
      }
    } else if (width <= 1024) {
      $el.addClass('digiseller-medium');
      if (width <= 768 && exact) {
        return $el.addClass('digiseller-x-medium');
      }
    } else {
      return $el.addClass('digiseller-large');
    }
  };

  DS.support = function() {
    var LeftPosition, TopPosition, h, mypage, scrollbars, settings, w, winC;
    w = 640;
    h = 480;
    scrollbars = 'no';
    mypage = 'http://www.internet-support.ru/asp/start.asp?fr=g&user=' + DS.opts.seller_id + '&service=1&shop=1&lang=' + DS.opts.currentLang + '&id_d=' + 0;
    LeftPosition = screen.width ? (screen.width - w) / 2 : 100;
    TopPosition = screen.height ? (screen.height - h) / 2 : 100;
    settings = 'width=' + w + ',height=' + h + ',top=' + TopPosition + ',left=' + LeftPosition + ',scrollbars=' + scrollbars + ',location=no,directories=no,status=no,menubar=no,toolbar=no,resizable=yes';
    winC = window.open(mypage, 'popupC', settings);
    winC.focus();
  };

  DS.inited = false;

  DS.init = function() {
    var $downmenu, $logo, $support, container, dataCat, getEl, hasCat, homeInited, name, route, _fn, _ref;
    if (DS.inited) {
      return false;
    }
    DS.inited = true;
    getEl = function(elName) {
      return document.getElementsByTagName(elName)[0] || document.documentElement;
    };
    DS.el.head = getEl('html');
    DS.el.body = getEl('body');
    if (!DS.$('#digiseller-css').length) {
      DS.dom.getStyle(DS.opts.host + 'shop_css.asp?seller_id=' + DS.opts.seller_id);
    }
    DS.opts.currency = DS.cookie.get('digiseller-currency') || DS.opts.currency;
    DS.util.each(['sort', 'rows', 'view'], function(param) {
      DS.opts[param] = DS.cookie.get(DS.route.articles.prefix + '-' + param) || DS.opts[param];
    });
    DS.opts.agree = DS.cookie.get('digiseller-agree') || DS.opts.agree;
    DS.opts.cart_uid = DS.cookie.get('digiseller-cart_uid') || DS.opts.cart_uid;
    DS.$body = DS.$('#digiseller-body');
    dataCat = DS.$body.attr('data-cat');
    DS.opts.orient = dataCat === 'v' ? 'v' : 'h';
    hasCat = dataCat === 'h' || dataCat === 'v' ? true : false;
    DS.$body.html(DS.tmpl(DS.tmpls.body, {
      hasCat: hasCat,
      logo: DS.$body.attr('data-logo') === '1' ? true : false,
      downmenu: DS.$body.attr('data-downmenu') === '1' ? true : false,
      purchases: DS.$body.attr('data-purchases') === '1' ? true : false,
      langs: DS.$body.attr('data-langs') === '1' ? true : false,
      cart: DS.$body.attr('data-cart') === '1' ? true : false,
      search: DS.$body.attr('data-search') === '1' ? true : false
    }));
    if (hasCat) {
      container = document.createElement('div');
      container.innerHTML = DS.tmpl(DS.tmpls.categoriesLeftOff, {});
      DS.el.body.appendChild(container.firstChild);
    }
    DS.widget.category.init();
    DS.widget.main.init();
    DS.widget.loader.init();
    DS.widget.search.init();
    DS.widget.lang.init();
    DS.widget.cartButton.init();
    $logo = DS.$('#digiseller-logo');
    if ($logo.length) {
      $logo.html(DS.tmpl(DS.tmpls.logo, {
        logo_img: DS.opts.logo_img
      }));
    }
    $downmenu = DS.$('#digiseller-downmenu');
    if ($downmenu.length) {
      $downmenu.html(DS.tmpl(DS.tmpls.downmenu, {}));
    }
    DS.setAdaptClass(DS.$body, true);
    DS.$(window).on('resize-adapt', function() {
      var $popupMain;
      DS.setAdaptClass(DS.$body, true);
      $popupMain = DS.$('#digiseller-popup-main');
      if ($popupMain.length) {
        return DS.setAdaptClass($popupMain);
      }
    });
    DS.$('.digiseller-buy-standalone').each(function(el) {
      new DS.widget.calc(DS.$(el));
    });
    $support = DS.$('#digiseller-support');
    $support.on('click', function(e) {
      e.stopPropagation();
      DS.support();
      return false;
    });
    DS.$('.close').on('click', function(e) {
      e.stopPropagation();
      $support.remove();
      return false;
    });
    homeInited = false;
    DS.historyClick.addRoute('#.*', function(params) {
      if (homeInited) {
        return;
      }
      homeInited = true;
      DS.route.home.action();
    });
    DS.historyClick.addRoute(DS.opts.hashPrefix + '/([a-z]*)', function(params) {
      DS.widget.main.getStatic(params[1]);
    });
    _ref = DS.route;
    _fn = function(route) {
      DS.historyClick.addRoute(DS.opts.hashPrefix + route.url, function(params) {
        homeInited = true;
        route.action(params);
      });
    };
    for (name in _ref) {
      route = _ref[name];
      if (!DS.route.hasOwnProperty(name) || !route.url || !route.action) {
        continue;
      }
      _fn(route);
    }
    DS.historyClick.rootAlias(DS.opts.hashPrefix + '/home');
    DS.historyClick.onGo = function() {
      DS.popup.close();
    };
    if (DS.widget.main.$el.length) {
      DS.historyClick.start();
      if (window.location.hash === '') {
        DS.historyClick.reload();
      }
    }
  };

  window.DigiSeller = DS;

  checkReady = function() {
    setTimeout(function() {
      if (document.readyState !== 'loading') {
        return DS.init();
      } else {
        return checkReady();
      }
    }, 1);
  };

  checkReady();

  return;

}).call(this);
